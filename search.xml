<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>批量更新减少渲染次数</title>
    <url>/undefined/</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>React 18 增加了一个新的优化特性，在代码中无需手动处理，就可以支持更多场景下的批量更新 (batching)。本文将说明什么是批量更新，在 React 18 版本以前它是如何工作的，以及它在 React 18 版本发生了怎样的变化。</p>
<h3 id="什么是批量更新？"><a href="#什么是批量更新？" class="headerlink" title="什么是批量更新？"></a>什么是批量更新？</h3><p>批量更新是指 React 将多次 state 更新进行合并处理，最终只进行一次渲染，以获得更好的性能。</p>
<p>例如，如果在同一个点击事件中有两个状态更新，React 总是会把它们批量处理成一个重新渲染。如果运行以下代码，我们会看到每次点击时，虽然设置了两次状态，React 也只执行一次渲染：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">	<span class="keyword">const</span> [flag, setFlag] = <span class="title function_">useState</span>(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="title function_">setCount</span>(<span class="function">(<span class="params">c</span>) =&gt;</span> c + <span class="number">1</span>) <span class="comment">// Does not re-render yet</span></span><br><span class="line">		<span class="title function_">setFlag</span>(<span class="function">(<span class="params">f</span>) =&gt;</span> !f) <span class="comment">// Does not re-render yet</span></span><br><span class="line">		<span class="comment">// React will only re-render once at the end (that&#x27;s batching!)</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">		<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>Next<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> <span class="attr">flag</span> ? &#x27;<span class="attr">blue</span>&#x27; <span class="attr">:</span> &#x27;<span class="attr">black</span>&#x27; &#125;&#125;&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">	)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>编写简洁的react代码</title>
    <url>/39576/</url>
    <content><![CDATA[<h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="comment">// 两个条件的条件渲染</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">ConditionalRenderingWhenTrueBad</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">	<span class="keyword">const</span> [showConditionalText, setShowConditionalText] = <span class="title function_">useState</span>(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params"></span>) =&gt; <span class="title function_">setShowConditionalText</span>(<span class="function">(<span class="params">showConditionalText</span>) =&gt;</span> !showConditionalText)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">		<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>Toggle the text<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			&#123;showConditionalText ? <span class="tag">&lt;<span class="name">p</span>&gt;</span>The condition must be true!<span class="tag">&lt;/<span class="name">p</span>&gt;</span> : null&#125;</span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">	)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 一个条件的条件渲染</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">ConditionalRenderingWhenTrueGood</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">	<span class="keyword">const</span> [showConditionalText, setShowConditionalText] = <span class="title function_">useState</span>(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params"></span>) =&gt; <span class="title function_">setShowConditionalText</span>(<span class="function">(<span class="params">showConditionalText</span>) =&gt;</span> !showConditionalText)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">		<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>Toggle the text<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			&#123;showConditionalText &amp;&amp; <span class="tag">&lt;<span class="name">p</span>&gt;</span>The condition must be true!<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">	)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="布尔型-props"><a href="#布尔型-props" class="headerlink" title="布尔型 props"></a>布尔型 props</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当组件的 prop 为 true 时，只需要提供属性名即可，例如：myTruthyProp，myTruthyProp=&#123;true&#125; 这样的写法是没有必要的。</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">HungryMessage</span> = (<span class="params">&#123; isHungry &#125;</span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;isHungry ? &#x27;I am hungry&#x27; : &#x27;I am full&#x27;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">BooleanPropGood</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">	<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">b</span>&gt;</span>This person is hungry: <span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;<span class="name">HungryMessage</span> <span class="attr">isHungry</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">b</span>&gt;</span>This person is full: <span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;<span class="name">HungryMessage</span> <span class="attr">isHungry</span>=<span class="string">&#123;false&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="字符串-props"><a href="#字符串-props" class="headerlink" title="字符串 props"></a>字符串 props</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字符串属性值可以用双引号赋值，不需要使用大括号或反引号</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Greeting</span> = (<span class="params">&#123; personName &#125;</span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hi, &#123;personName&#125;!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">StringPropValuesGood</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">	<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;<span class="name">Greeting</span> <span class="attr">personName</span>=<span class="string">&quot;John&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;<span class="name">Greeting</span> <span class="attr">personName</span>=<span class="string">&quot;Matt&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;<span class="name">Greeting</span> <span class="attr">personName</span>=<span class="string">&quot;Paul&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="事件处理函数"><a href="#事件处理函数" class="headerlink" title="事件处理函数"></a>事件处理函数</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果一个事件处理函数只接受 Event 对象这一个参数，可以像 onChange=&#123;handleChange&#125; 这样直接将该函数作为事件处理对象，而不需要用匿名函数将该函数再包裹一层：onChange=&#123;e =&gt; handleChange(e)&#125;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">UnnecessaryAnonymousFunctionsGood</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">	<span class="keyword">const</span> [inputValue, setInputValue] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> <span class="title function_">handleChange</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">		<span class="title function_">setInputValue</span>(e.<span class="property">target</span>.<span class="property">value</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">		<span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">&quot;name&quot;</span>&gt;</span>Name: <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">				<span class="attr">id</span>=<span class="string">&quot;name&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">				<span class="attr">value</span>=<span class="string">&#123;inputValue&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">				<span class="attr">onChange</span>=<span class="string">&#123;handleChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">			/&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;/&gt;</span></span></span><br><span class="line">	)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="传递组件作为-props"><a href="#传递组件作为-props" class="headerlink" title="传递组件作为 props"></a>传递组件作为 props</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当组件作为 prop 被传递给另一个组件时，被传递的组件如果不需要其他的 props，则无需使用函数再包裹一层。</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">CircleIcon</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">	<span class="language-xml"><span class="tag">&lt;<span class="name">svg</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">		<span class="attr">height</span>=<span class="string">&quot;100&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">		<span class="attr">width</span>=<span class="string">&quot;100&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">	&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;<span class="name">circle</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">			<span class="attr">cx</span>=<span class="string">&quot;50&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">			<span class="attr">cy</span>=<span class="string">&quot;50&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">			<span class="attr">r</span>=<span class="string">&quot;40&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">			<span class="attr">stroke</span>=<span class="string">&quot;black&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">			<span class="attr">stroke-width</span>=<span class="string">&quot;3&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">			<span class="attr">fill</span>=<span class="string">&quot;red&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">		/&gt;</span></span></span><br><span class="line"><span class="language-xml">	<span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ComponentThatAcceptsAnIcon</span> = (<span class="params">&#123; IconComponent &#125;</span>) =&gt; (</span><br><span class="line">	<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>Below is the icon component prop I was given:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;<span class="name">IconComponent</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">UnnecessaryAnonymousFunctionComponentsBad</span> = (<span class="params"></span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">ComponentThatAcceptsAnIcon</span> <span class="attr">IconComponent</span>=<span class="string">&#123;()</span> =&gt;</span> <span class="tag">&lt;<span class="name">CircleIcon</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">UnnecessaryAnonymousFunctionComponentsGood</span> = (<span class="params"></span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">ComponentThatAcceptsAnIcon</span> <span class="attr">IconComponent</span>=<span class="string">&#123;CircleIcon&#125;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="未定义的-props"><a href="#未定义的-props" class="headerlink" title="未定义的 props"></a>未定义的 props</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 未定义的 props 是被自动拦截的，如果未定义的 prop 是允许的话，则不用担心未定义的回调。</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ButtonOne</span> = (<span class="params">&#123; handleClick &#125;</span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick</span> || <span class="attr">undefined</span>&#125;&gt;</span>Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ButtonTwo</span> = (<span class="params">&#123; handleClick &#125;</span>) =&gt; &#123;</span><br><span class="line">	<span class="keyword">const</span> <span class="title function_">noop</span> = (<span class="params"></span>) =&gt; &#123;&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick</span> || <span class="attr">noop</span>&#125;&gt;</span>Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">UndefinedPropsBad</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">	<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;<span class="name">ButtonOne</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;<span class="name">ButtonOne</span> <span class="attr">handleClick</span>=<span class="string">&#123;()</span> =&gt;</span> alert(&#x27;Clicked!&#x27;)&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;<span class="name">ButtonTwo</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;<span class="name">ButtonTwo</span> <span class="attr">handleClick</span>=<span class="string">&#123;()</span> =&gt;</span> alert(&#x27;Clicked!&#x27;)&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">UndefinedPropsGood</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">	<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;<span class="name">ButtonOne</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;<span class="name">ButtonOne</span> <span class="attr">handleClick</span>=<span class="string">&#123;()</span> =&gt;</span> alert(&#x27;Clicked!&#x27;)&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="state-赋值依赖于之前的-state"><a href="#state-赋值依赖于之前的-state" class="headerlink" title="state 赋值依赖于之前的 state"></a>state 赋值依赖于之前的 state</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果新的 state 依赖于之前的 state，则将之前的 state 作为参数，使用函数赋值的方式进行 state 赋值。React 的 state 更新是批量进行的，不这样写的话，更新时可能会导致意想不到的结果。</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">PreviousStateBad</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">	<span class="keyword">const</span> [isDisabled, setIsDisabled] = <span class="title function_">useState</span>(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> <span class="title function_">toggleButton</span> = (<span class="params"></span>) =&gt; <span class="title function_">setIsDisabled</span>(!isDisabled)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> <span class="title function_">toggleButton2Times</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">			<span class="title function_">toggleButton</span>()</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">		<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">disabled</span>=<span class="string">&#123;isDisabled&#125;</span>&gt;</span>I&#x27;m &#123;isDisabled ? &#x27;disabled&#x27; : &#x27;enabled&#x27;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;toggleButton&#125;</span>&gt;</span>Toggle button state<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;toggleButton2Times&#125;</span>&gt;</span>Toggle button state 2 times<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">	)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">PreviousStateGood</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">	<span class="keyword">const</span> [isDisabled, setIsDisabled] = <span class="title function_">useState</span>(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> <span class="title function_">toggleButton</span> = (<span class="params"></span>) =&gt; <span class="title function_">setIsDisabled</span>(<span class="function">(<span class="params">isDisabled</span>) =&gt;</span> !isDisabled)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> <span class="title function_">toggleButton2Times</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">			<span class="title function_">toggleButton</span>()</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">		<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">disabled</span>=<span class="string">&#123;isDisabled&#125;</span>&gt;</span>I&#x27;m &#123;isDisabled ? &#x27;disabled&#x27; : &#x27;enabled&#x27;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;toggleButton&#125;</span>&gt;</span>Toggle button state<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;toggleButton2Times&#125;</span>&gt;</span>Toggle button state 2 times<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">	)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="其他实践"><a href="#其他实践" class="headerlink" title="其他实践"></a>其他实践</h3><ul>
<li>将复杂逻辑提取到具有清晰名称的函数中</li>
<li>将魔法数字提取为常量</li>
<li>使用明确命名的变量</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>编写简洁的react组件</title>
    <url>/15145/</url>
    <content><![CDATA[<h3 id="避免使用扩展操作符传递-props"><a href="#避免使用扩展操作符传递-props" class="headerlink" title="避免使用扩展操作符传递 props"></a>避免使用扩展操作符传递 props</h3><p>首先，让我们从一个应该避免的反模式开始。除非有明确的理由这样做，否则应该避免在组件树中使用扩展操作符传递 props，比如：{ …props }。</p>
<p>通过这种方式传递 props 确实可以更快的编写组件。但这也使得我们很难去定位代码中的 bug。会使我们对编写的组件失去信心，会使得我们重构组件变得更加困难，而且可能会导致出现很难排查的 bug。</p>
<h3 id="将函数参数封装成一个对象"><a href="#将函数参数封装成一个对象" class="headerlink" title="将函数参数封装成一个对象"></a>将函数参数封装成一个对象</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">sampleFunction</span> = (<span class="params">&#123; param1, param2, param3 &#125;</span>) =&gt; &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(&#123; param1, param2, param3 &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以这种方式编写函数签名有几个显著的优点：</p>
<p>1、 你不用再担心参数传递的顺序。我曾犯过几次因函数传参顺序问题而产生了 bug 的错误。<br>2、 对于配置了智能提示的编辑器（现在的大多数都有），可以很好地完成函数参数的自动填充。</p>
<h3 id="于事件处理函数，将该处理函数作为函数的返回值"><a href="#于事件处理函数，将该处理函数作为函数的返回值" class="headerlink" title="于事件处理函数，将该处理函数作为函数的返回值"></a>于事件处理函数，将该处理函数作为函数的返回值</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">SampleComponent</span>(<span class="params">&#123; onValueChange &#125;</span>) &#123;</span><br><span class="line">	<span class="keyword">const</span> <span class="title function_">handleChange</span> = (<span class="params">key</span>) =&gt; &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="function">(<span class="params">e</span>) =&gt;</span> <span class="title function_">onValueChange</span>(key, e.<span class="property">target</span>.<span class="property">value</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">		<span class="language-xml"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;handleChange(</span>&#x27;<span class="attr">name</span>&#x27;)&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;handleChange(</span>&#x27;<span class="attr">email</span>&#x27;)&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;handleChange(</span>&#x27;<span class="attr">phone</span>&#x27;)&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">	)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="组件渲染使用-map-而非-if-else"><a href="#组件渲染使用-map-而非-if-else" class="headerlink" title="组件渲染使用 map 而非 if&#x2F;else"></a>组件渲染使用 map 而非 if&#x2F;else</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Student</span> = (<span class="params">&#123; name &#125;</span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Student name: &#123;name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Teacher</span> = (<span class="params">&#123; name &#125;</span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Teacher name: &#123;name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Guardian</span> = (<span class="params">&#123; name &#125;</span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Guardian name: &#123;name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">SampleComponent</span>(<span class="params">&#123; user &#125;</span>) &#123;</span><br><span class="line">	<span class="keyword">let</span> <span class="title class_">Component</span> = <span class="title class_">Student</span></span><br><span class="line">	<span class="keyword">if</span> (user.<span class="property">type</span> === <span class="string">&#x27;teacher&#x27;</span>) &#123;</span><br><span class="line">		<span class="title class_">Component</span> = <span class="title class_">Teacher</span></span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (user.<span class="property">type</span> === <span class="string">&#x27;guardian&#x27;</span>) &#123;</span><br><span class="line">		<span class="title class_">Component</span> = <span class="title class_">Guardian</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">		<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">Component</span> <span class="attr">name</span>=<span class="string">&#123;user.name&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">	)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">COMPONENT_MAP</span> = &#123;</span><br><span class="line">  <span class="attr">student</span>: <span class="title class_">Student</span>,</span><br><span class="line">  <span class="attr">teacher</span>: <span class="title class_">Teacher</span>,</span><br><span class="line">  <span class="attr">guardian</span>: <span class="title class_">Guardian</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">SampleComponent</span>(<span class="params">&#123; user &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">Component</span> = <span class="variable constant_">COMPONENT_MAP</span>[user.<span class="property">type</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Component</span> <span class="attr">name</span>=<span class="string">&#123;user.name&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Hook组件"><a href="#Hook组件" class="headerlink" title="Hook组件"></a>Hook组件</h3>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
</search>
