<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ES6相关</title>
    <url>/posts/49273/</url>
    <content><![CDATA[<h4 id="let-const-用于申明常量"><a href="#let-const-用于申明常量" class="headerlink" title="let - const(用于申明常量 )"></a>let - const(用于申明常量 )</h4><ol>
<li>let申明变量且变量不能重复申明const申明常量且不可修改</li>
<li>快级作用域</li>
<li>不存在变量提升</li>
<li>不影响作用域链</li>
</ol>
<h4 id="解构赋值-let-xxx"><a href="#解构赋值-let-xxx" class="headerlink" title="解构赋值 let {} &#x3D; xxx"></a>解构赋值 let {} &#x3D; xxx</h4><ol>
<li>左右结构形同</li>
</ol>
<span id="more"></span>

<h4 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串 &#96;&#96;"></a>模板字符串 &#96;&#96;</h4><ol>
<li>内容中可以直接出现换行符</li>
<li>变量拼接 <code>$&#123;&#125;</code></li>
</ol>
<h4 id="简化对象"><a href="#简化对象" class="headerlink" title="简化对象"></a>简化对象</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">sayName</span> = (<span class="params">name</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name,</span><br><span class="line">    sayName</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><ol>
<li>允许使用 (&#x3D;&gt;) 定义函数</li>
<li>this 是<strong>静态</strong>的，this始终指向函数申明时所在作用域下的 this 的值</li>
<li>不能作为<strong>构造函数</strong>实例化对象</li>
<li>不能使用<strong>arguments</strong>变量</li>
<li>箭头函数简写<br> (1) 省略小括号，当形参只有一个的时候<br> (2) 省略花括号，当代码体只有一条语句的时候，此时return必须省略，函数执行结果就是函数的返回值</li>
</ol>
<ul>
<li>箭头函数适合和this无关的回调 （定时器，数组）</li>
</ul>
<h4 id="es6允许给函数参数赋值初始值。可以使用解构赋值"><a href="#es6允许给函数参数赋值初始值。可以使用解构赋值" class="headerlink" title="es6允许给函数参数赋值初始值。可以使用解构赋值"></a>es6允许给函数参数赋值初始值。可以使用解构赋值</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span> (a,b,c=<span class="number">5</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="es6-引入rest参数，用于获取函数的实参，用来代替arguments"><a href="#es6-引入rest参数，用于获取函数的实参，用来代替arguments" class="headerlink" title="es6 引入rest参数，用于获取函数的实参，用来代替arguments"></a>es6 引入rest参数，用于获取函数的实参，用来代替arguments</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="comment">// rest参数必须放到函数参数的最后</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="扩展运算符-…"><a href="#扩展运算符-…" class="headerlink" title="扩展运算符 …"></a>扩展运算符 <strong>…</strong></h4><ol>
<li>扩展运算符能将数组装换为逗号分割的参数序列</li>
<li>数组合并 […arr1,…arr2]</li>
<li>数组克隆 […arr1] (浅拷贝)</li>
<li>将伪数组转成真数组</li>
</ol>
<h4 id="Symbol-第七种数据类型，表示一个独一无二的值"><a href="#Symbol-第七种数据类型，表示一个独一无二的值" class="headerlink" title="Symbol 第七种数据类型，表示一个独一无二的值"></a>Symbol 第七种数据类型，表示一个独一无二的值</h4><ol>
<li>Symbol的值是惟一的，用来解决命名冲突的问题</li>
<li>Symbol的值不能与其他值进行运算</li>
<li>Symbol定义的对象属性不能使用<em>for…in</em>循环遍历，可以使用Reflect.ownKeys来获取对象的所有键名</li>
</ol>
<ul>
<li>Symbol具有一些内置属性作用于对象时会改变对象在某些特定场景的表现</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> methods = &#123;</span><br><span class="line">    [<span class="title class_">Symbol</span>(<span class="string">&#x27;xxx&#x27;</span>)]: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    [<span class="title class_">Symbol</span>(<span class="string">&#x27;xxx&#x27;</span>)]: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="迭代器-Interator-（对象的一张属性）"><a href="#迭代器-Interator-（对象的一张属性）" class="headerlink" title="迭代器 Interator （对象的一张属性）"></a>迭代器 Interator （对象的一张属性）</h4><ol>
<li>es6 创造了一种新的遍历命令<em>for…of</em>,Interator接口主要提供<em>for…of</em>消费</li>
<li>原生具备Interator接口的数据有<br> a) Array<br> b) Arguments<br> c) Set<br> d) Map<br> e) String<br> f) TypedArray<br> g) NodeList</li>
<li>工作原理<br>a) 创建一个指针对象，指向当前数据结构的其实位置<br>b) 第一次调用对象的next方法，指针自动指向数据结构的第一个成员<br>c) 接下来不断调用next方法，指针一直往后移动，直到指向最后一个成员<br>d) 没调用一次next方法返回一个包含value和done属性的对象</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Interator实现自定义的遍历</span></span><br><span class="line"><span class="keyword">const</span> banji = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;终极一班&#x27;</span>,</span><br><span class="line">    <span class="attr">students</span>: [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>],</span><br><span class="line">    [<span class="title class_">Symbol</span>.<span class="property">interator</span>]() &#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> _this = <span class="variable language_">this</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">next</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (index &lt; <span class="variable language_">this</span>.<span class="property">students</span>.<span class="property">length</span>) &#123;</span><br><span class="line">                    index++</span><br><span class="line">                    <span class="keyword">return</span> &#123;<span class="attr">value</span>: _this.<span class="property">students</span>[index], <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;<span class="attr">value</span>: undefind, <span class="attr">done</span>: <span class="literal">true</span>&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h4><ol>
<li>执行特殊申明特殊的函数</li>
<li>函数参数</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> * maker (arg) &#123;</span><br><span class="line">    <span class="comment">// yield 函数代码阿德分隔符，有函数方法的next执行</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;11&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;第一次&#x27;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;22&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;第二次&#x27;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;33&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> interator = <span class="title function_">maker</span>(<span class="string">&#x27;开始&#x27;</span>)</span><br><span class="line"><span class="comment">// next方法可以传入实参，将作为上一次yield语句的返回结果</span></span><br><span class="line">interator.<span class="title function_">next</span>() <span class="comment">// 11</span></span><br><span class="line">interator.<span class="title function_">next</span>() <span class="comment">// 22</span></span><br><span class="line">interator.<span class="title function_">next</span>() <span class="comment">// 33</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> <span class="title function_">maker</span>()) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v) <span class="comment">// 第一次 第二次</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>异步编程</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1s后控制台输出111,2s后控制台输出222,3s后控制台输出333</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">one</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);interator.<span class="title function_">next</span>()&#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">two</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);interator.<span class="title function_">next</span>()&#125;,<span class="number">2000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">three</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);interator.<span class="title function_">next</span>()&#125;,<span class="number">3000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> * marker () &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="title function_">one</span>()</span><br><span class="line">    <span class="keyword">yield</span> <span class="title function_">two</span>()</span><br><span class="line">    <span class="keyword">yield</span> <span class="title function_">three</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> interator = <span class="title function_">marker</span>()</span><br><span class="line">interator.<span class="title function_">next</span>()</span><br></pre></td></tr></table></figure>

<h4 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h4><ul>
<li>手写 基于Promise A+规范实现Promise</li>
</ul>
<h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><ol>
<li>es6提供了新的数据结构Set,它类似于数组但他的成员是唯一的，Set实现了inteator接口，可以使用 <em>…</em> 扩展运算符和<em>for…of</em> 进行遍历。<ol>
<li>size, 返回元素个数</li>
<li>add, 添加新元素</li>
<li>delete, 删除元素</li>
<li>has, 检测</li>
<li>clear, 清空</li>
</ol>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 数组去重</span></span><br><span class="line"><span class="keyword">let</span> result = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)]</span><br><span class="line"><span class="comment">// 2. 交集</span></span><br><span class="line"><span class="keyword">let</span> result = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)].<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="keyword">new</span> <span class="title class_">Set</span>(arr2).<span class="title function_">has</span>(item))</span><br><span class="line"><span class="comment">// 3. 并集</span></span><br><span class="line"><span class="keyword">let</span> result = [...<span class="keyword">new</span> <span class="title class_">Set</span>([...arr1,...arr2])]</span><br><span class="line"><span class="comment">// 4. 差集</span></span><br><span class="line"><span class="keyword">let</span> result = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)].<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> !(<span class="keyword">new</span> <span class="title class_">Set</span>(arr2).<span class="title function_">has</span>(item)))</span><br></pre></td></tr></table></figure>

<h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><ol>
<li>es6提供了Map数据结构，它类似于对象，但是键值的范围不限于字符串，各种类型的值都可以作为键，Map实现了inteator接口，可以使用 <em>…</em> 扩展运算符和<em>for…of</em> 进行遍历。<ol>
<li>size, 返回元素个数</li>
<li>get, 获取元素</li>
<li>set, 添加元素</li>
<li>delete, 删除元素</li>
<li>clear, 清空</li>
</ol>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;龙的传人&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> key = &#123;</span><br><span class="line">    <span class="attr">school</span>: <span class="string">&#x27;阳光工程&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">m.<span class="title function_">set</span>(key, [<span class="string">&#x27;1027&#x27;</span>, <span class="string">&#x27;1024&#x27;</span>])</span><br><span class="line">m.<span class="title function_">get</span>(key)</span><br><span class="line">m.<span class="title function_">clear</span>()</span><br></pre></td></tr></table></figure>

<h4 id="class-类"><a href="#class-类" class="headerlink" title="class 类"></a>class 类</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 申明类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="comment">// 静态属性</span></span><br><span class="line">    <span class="keyword">static</span> name = <span class="string">&#x27;手机&#x27;</span></span><br><span class="line">    <span class="keyword">static</span> change () &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;我可以改变世界&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    <span class="title function_">constructor</span> (brand,price) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">brand</span> = brand</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">price</span> = price</span><br><span class="line">    &#125;</span><br><span class="line">    call () &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;我可以打电话&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> onePlus = <span class="keyword">new</span> <span class="title class_">Phone</span>(<span class="string">&#x27;1+&#x27;</span>, <span class="string">&#x27;price&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// es5继承</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Phone</span> (brand,price) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">brand</span> = brand</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">price</span> = price</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Phone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">call</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;我可以打电话&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 属性继承</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SmartPhone</span> (brand,price,color,size) &#123;</span><br><span class="line">    <span class="title class_">Phone</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>,brand,price)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">color</span> = color</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">size</span> = size</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法继承</span></span><br><span class="line"><span class="title class_">SmartPhone</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Phone</span></span><br><span class="line"><span class="title class_">SmartPhone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">SmartPhone</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">SmartPhone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">playGame</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;我可以玩游戏&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化</span></span><br><span class="line"><span class="keyword">const</span> chuizi = <span class="keyword">new</span> <span class="title class_">SmartPhone</span>(<span class="string">&#x27;锤子&#x27;</span>, <span class="number">1999</span>, <span class="string">&#x27;黑色&#x27;</span>, <span class="string">&#x27;5.5inch&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// es6 类的继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">phone</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span> (brand,price) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">brand</span> = brand</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">price</span> = price</span><br><span class="line">    &#125;</span><br><span class="line">    call () &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;我可以打电话&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SmartPhone</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Phone</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span> (brand,price,color,size) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(brand,price)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">color</span> = color</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">size</span> = size</span><br><span class="line">    &#125;</span><br><span class="line">    playGame () &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;我可以玩游戏&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> xiaomi = <span class="keyword">new</span> <span class="title class_">SmartPhone</span>(<span class="string">&#x27;小米&#x27;</span>, <span class="number">1999</span>, <span class="string">&#x27;黑色&#x27;</span>, <span class="string">&#x27;4.7inch&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类对父类方法的重写</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SmartPhone</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Phone</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span> (brand,price,color,size) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(brand,price)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">color</span> = color</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">size</span> = size</span><br><span class="line">    &#125;</span><br><span class="line">    call () &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;我可以进行视频方法&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    playGame () &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;我可以玩游戏&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getter,setter</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="comment">// 通常是一个计算属性</span></span><br><span class="line">    get price () &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;价格属性被读取了&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1999</span></span><br><span class="line">    &#125;</span><br><span class="line">    set price (newValue) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;价格属性被读取了&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Phone</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">price</span>) <span class="comment">// 触发get</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">price</span> = <span class="string">&#x27;free&#x27;</span>) <span class="comment">// 触发set</span></span><br></pre></td></tr></table></figure>

<h4 id="数值扩展"><a href="#数值扩展" class="headerlink" title="数值扩展"></a>数值扩展</h4><ol>
<li>Number.EPSILON</li>
<li>二进制 0b,八进制 0o, 十六进制 0x</li>
<li>Number.isFinite() 检测是否为有限数</li>
<li>Number.isNaN() 检测是否为 NaN es5是单独的方法</li>
<li>Number.parseInt() 字符串转整数</li>
<li>Number.isInteger() 检测是否为整数</li>
<li>Math.trunc() 将数字的小数部分抹掉</li>
<li>Math.sign() 判断一个数字为整数负数还是零</li>
</ol>
<h4 id="对象方法的扩展"><a href="#对象方法的扩展" class="headerlink" title="对象方法的扩展"></a>对象方法的扩展</h4><ol>
<li>Objsect.is() 判断两个值是否完全相等(NaN特殊)</li>
<li>Object.assign() 对象的合并</li>
<li>Object.setPrototypeOf 设置原型对象 Object.getPrototypeOf获取原型对象</li>
</ol>
<h4 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h4><ol>
<li>防止命名冲突</li>
<li>代码复用</li>
<li>高维护性</li>
</ol>
<ul>
<li>export命令用于规定模块对外接口<ol>
<li>分别暴露 每个数据前加export</li>
<li>export {} 统一暴露</li>
<li>export default 默认暴露</li>
</ol>
</li>
<li>import命令用于输入其他模块提供的功能 <em>tyep&#x3D;”module”</em><ol>
<li>通用导入 import * as xxx from ‘xxx.js’</li>
<li>解构赋值 import {} from ‘xxx.js’; 解决重名 import {aa as bb, cc} from ‘xxx.js’; 默认暴露 import {default as xx} from ‘xxx.js’</li>
<li>简便形式 只能针对默认暴露 import xx from ‘xxx.js’</li>
</ol>
</li>
</ul>
<h4 id="ES7"><a href="#ES7" class="headerlink" title="ES7"></a>ES7</h4><ul>
<li>includes 方法用于检测数组中是否包含某个元素，返回布尔类型值。之前使用indexOf() 返回下表</li>
<li>使用 ** 实现幂运算，之前使用Math.pow()<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mignzhu = [<span class="string">&#x27;西游记&#x27;</span>, <span class="string">&#x27;红楼梦&#x27;</span>, <span class="string">&#x27;三国演义&#x27;</span>, <span class="string">&#x27;水浒传&#x27;</span>]</span><br><span class="line">arr.<span class="title function_">includes</span>(<span class="string">&#x27;西游记&#x27;</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span> ** <span class="number">10</span>) <span class="comment">// 1024</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, <span class="number">10</span>)) <span class="comment">// 1024</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="ES8"><a href="#ES8" class="headerlink" title="ES8"></a>ES8</h4><ul>
<li>async<ol>
<li>async 函数的返回值为promise对象</li>
<li>promise对象的结果由async函数执行的返回值决定</li>
</ol>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span> () &#123;</span><br><span class="line">    <span class="comment">// 函数返回结果不为promise</span></span><br><span class="line">    <span class="keyword">return</span>; <span class="comment">// promise的转态为resolve</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;出错了&#x27;</span>) <span class="comment">// promise的状态为reject</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span> () &#123;</span><br><span class="line">    <span class="comment">// 函数返回结果为promise，由函数返回的promise决定async返回的promise的状态</span></span><br><span class="line">    retunrn <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>()</span><br><span class="line">        <span class="title function_">reject</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>await<ol>
<li>await 必须写下async函数中</li>
<li>await 右侧的表达式一般为 promise 对象</li>
<li>await 返回的是promise的值</li>
<li>await 的promise失败了，就出抛出异常，需要通过<strong>try…catch</strong>捕获处理</li>
</ol>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;用户数据&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;失败了&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span> () &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> p1 <span class="comment">// 用户数据</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> p2</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e) <span class="comment">// 失败了</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>对象方法的扩展<br>  1.Object.values 返回一个给定对象的所有可枚举属性值的数组<br>  2.Object.entries 返回一个给定对象自身可遍历属性 [key,value] 的数组<br>  3.Object.getOwnPropertyDescriptors 返回对象自身属性的描述对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;李小龙&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="string">&#x27;18&#x27;</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(school) <span class="comment">// [name,age,sex]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">values</span>(school) <span class="comment">// [李小龙,18,男]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">entries</span>(school) <span class="comment">// [[name,李小龙],[age,18],[sex,男]]</span></span><br><span class="line"><span class="comment">// entries构造map数据</span></span><br><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(school))</span><br><span class="line">m.<span class="title function_">get</span>(name) <span class="comment">// 李小龙</span></span><br></pre></td></tr></table></figure>

<h4 id="ES9"><a href="#ES9" class="headerlink" title="ES9"></a>ES9</h4><ul>
<li>为对象提供了像数组一样的 rest 参数，和扩展运算符</li>
<li>正则扩展<em>命名捕获分组</em></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="string">&#x27;&lt;a href=&quot;https://www.baidu.com&quot;&gt;百度&lt;/a&gt;&#x27;</span></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/&lt;a href=&quot;(.*)&quot;&gt;(.*)&lt;\/a&gt;/</span></span><br><span class="line"><span class="keyword">const</span> res = reg.<span class="title function_">exec</span>(url) <span class="comment">// [&#x27;&lt;a href=&quot;https://www.baidu.com&quot;&gt;百度&lt;/a&gt;&#x27;, &#x27;https://www.baidu.com&#x27;, &#x27;百度&#x27;]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="string">&#x27;&lt;a href=&quot;https://www.baidu.com&quot;&gt;百度&lt;/a&gt;&#x27;</span></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/&lt;a href=&quot;(?&lt;url&gt;.*)&quot;&gt;(?&lt;text&gt;.*)&lt;\/a&gt;/</span></span><br><span class="line"><span class="keyword">const</span> res = reg.<span class="title function_">exec</span>(url).<span class="property">groups</span> <span class="comment">// &#123;url: &#x27;https://www.baidu.com&#x27;,text: &#x27;百度&#x27;&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>正则扩展<em>反向断言</em></li>
</ul>
<h4 id="ES10"><a href="#ES10" class="headerlink" title="ES10"></a>ES10</h4><h4 id="ES11"><a href="#ES11" class="headerlink" title="ES11"></a>ES11</h4>]]></content>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>HTMl相关</title>
    <url>/posts/11073/</url>
    <content><![CDATA[<ol>
<li><code>src</code> 和 <code>href</code>的区别？</li>
</ol>
<ul>
<li>src: 表示对当前资源的引用，它指向的内容会嵌入到当前标签所在的位置，src 会将其指向的资源下载并应用到文档中。如 js 脚本，当浏览器解析到该脚本时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，所以 js 脚本一把你会放在页面底部。</li>
<li>href: 表示对超文本引用，它指向一些网络资源，建立和当前元素或当前文档的链接关系。当浏览器识别到它指向的资源时，就会并行下载资源，不会停止对当前文档的处理，常用在<code>a</code> <code>link</code>标签上。</li>
</ul>
<ol start="2">
<li>对 HTML 语义化的理解？</li>
</ol>
<h5 id="根据内容的结构化（内容语义化），选择合适的标签（代码语义化）。"><a href="#根据内容的结构化（内容语义化），选择合适的标签（代码语义化）。" class="headerlink" title="根据内容的结构化（内容语义化），选择合适的标签（代码语义化）。"></a>根据内容的结构化（内容语义化），选择合适的标签（代码语义化）。</h5><ul>
<li>优点：a. 对机器有好 b.对开发者有好</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span>头部<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span>导航栏<span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span>区块（有语义化的div）<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">main</span>&gt;</span>主要区域<span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span>主要内容<span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aside</span>&gt;</span>侧边栏<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span>底部<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>DOCTYPE(⽂档类型) 的作⽤</li>
</ol>
<p>文档类型申明，他告诉浏览器应该以什么样的文档类型来解析该文档。必须申明在<code>html</code>的第一行。</p>
<ol start="4">
<li><code>script</code>标签中 defer 和 async 的区别？</li>
</ol>
<p>(1) defer：</p>
<p><code>&lt;script defer&gt;</code> 表示延迟执行脚本。它告诉浏览器立即下载脚本，但是延迟执行脚本直到文档解析完成之后。多个带有 defer 属性的脚本会按照它们在文档中出现的顺序依次执行。脚本会在 DOMContentLoaded 事件之前执行。</p>
<p>(2) async：</p>
<p><code>&lt;script async&gt;</code> 表示异步加载脚本。它告诉浏览器立即下载脚本，并且不阻止页面解析，即使脚本没有下载完成。多个带有 async 属性的脚本不会按照它们在文档中出现的顺序执行，而是以下载完成的顺序执行。<br>脚本会在下载完成后尽快执行，可能在 DOMContentLoaded 事件之前或之后。</p>
<ul>
<li><p>总结：<br>a. 如果脚本的执行顺序很重要，并且你希望在 DOMContentLoaded 事件之前执行脚本，那么使用 defer 属性。<br>b.如果脚本的加载和执行顺序不重要，并且你希望脚本尽快执行而不阻塞页面解析，那么使用 async 属性。</p>
<p><img src="https://camo.githubusercontent.com/15c353feed3e65786323201eea097eb1cdef970dc1c7be5493f7ea42c651385f/68747470733a2f2f63646e2e6e6c61726b2e636f6d2f79757175652f302f323032302f706e672f313530303630342f313630333534373236323730392d35303239633465342d343266352d346664342d626362622d6330653065336134306635612e706e67" alt="alt 属性文本"></p>
</li>
</ul>
<ol start="5">
<li>常⽤的 <code>meta</code> 标签有哪些?</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;关键词&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;页面描述内容&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li>HTML5有哪些更新？</li>
</ol>
<ul>
<li>语义化的标签</li>
<li>媒体标签</li>
<li>表单： 表单类型（date）表单属性（placeholder） 表单事件（oninput，oninvalid）</li>
<li>进度条 （progress）</li>
<li>DOM查询操作（querySelector，querySelectorAll）</li>
<li>web存储 （localStorage,sessionStorage）</li>
<li>其他 （canvas，）</li>
</ul>
<ol start="7">
<li>web worker？</li>
<li>HTML5 drag API？</li>
<li>渐进增强和优雅降级之间的区别？</li>
<li>浏览器乱码的原因是什么？如何解决？</li>
<li>文档声明（Doctype）和<!Doctype html>有何作用? 严格模式与混杂模式如何区分？它们有何意义?</li>
</ol>
]]></content>
      <tags>
        <tag>HTMl</tag>
      </tags>
  </entry>
  <entry>
    <title>css-flex</title>
    <url>/posts/6230/</url>
    <content><![CDATA[<h3 id="定义flex容器极其容器的属性"><a href="#定义flex容器极其容器的属性" class="headerlink" title="定义flex容器极其容器的属性"></a>定义flex容器极其容器的属性</h3><ul>
<li>定义<em>flex</em>容器</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex | inline-flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h3><ul>
<li>决定主轴方向</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h3><ul>
<li>决定是否换行</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap | nowrap | wrap-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h3><ul>
<li>决定主轴的对其方式</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-around | space-between;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h3><ul>
<li>决定副轴的对其方式</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">align-items</span>: flex-start | flex-end | center | baseline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="flex容器中项目的属性"><a href="#flex容器中项目的属性" class="headerlink" title="flex容器中项目的属性"></a>flex容器中项目的属性</h3><h3 id="order"><a href="#order" class="headerlink" title="order"></a>order</h3><ul>
<li>定义项目在容器中的排列顺序</li>
</ul>
<h3 id="flex-basis-flex-grow-flex-shrink"><a href="#flex-basis-flex-grow-flex-shrink" class="headerlink" title="flex-basis,flex-grow;flex-shrink"></a>flex-basis,flex-grow;flex-shrink</h3><ul>
<li>flex为flex-basis,flex-grow,flex-shrink的缩写;</li>
<li>flex-basis定义了在分配多余空间之前，项目占据的主轴空间；浏览器根绝这个属性计算主轴是否有多余空间，默认为auto,即项目本来的大小。</li>
<li>flex-grow定义项目放大的比例，默认为0，即存在多余空间，也不放大。</li>
<li>flex-shrink定义了项目缩小的比例，默认为1，即空间不足，该项目将缩小。</li>
</ul>
<h4 id="flex取值"><a href="#flex取值" class="headerlink" title="flex取值"></a>flex取值</h4><ul>
<li>当flex的值为一个非负数字时，该数字为flex-grow的值；flex-shrink为1，flex-basis为0%。</li>
<li>当flex取值为一个长度或百分比的时候；则视为flex-basis的值；flex-grow和flex-shrink为1；</li>
<li>当flex取两个非负数字的时候；为flex-grow和flex-shrink的值；flex-basis为0%</li>
<li>当flex取一个非负数字和一个长度或百分比时；为flex-grow和flex-basis的值；flex-shrink为1</li>
</ul>
<h3 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h3><ul>
<li>允许单个项目与其他项目不一样的对其方式</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">align-self</span>: auto | flex-start | flex-end | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css基础知识</title>
    <url>/posts/21495/</url>
    <content><![CDATA[<h3 id="对盒子模型的理解？"><a href="#对盒子模型的理解？" class="headerlink" title="对盒子模型的理解？"></a>对盒子模型的理解？</h3><ul>
<li><p>对文档进行布局的时候，浏览器的渲染引擎会根据标准之一的css基础盒模型，将所有的元素表示为一个一个矩形的盒子。</p>
</li>
<li><p>标准盒模型: 盒子总宽度 &#x3D; width + padding + border + margin</p>
</li>
<li><p>怪异盒模型: 盒子总宽度 &#x3D; width + margin</p>
</li>
<li><p>Box-sizing: content-box|border-box|inherit;</p>
</li>
</ul>
<span id="more"></span>


<h3 id="CSS有哪些选择器？优先级？那些属性了可以被继承？"><a href="#CSS有哪些选择器？优先级？那些属性了可以被继承？" class="headerlink" title="CSS有哪些选择器？优先级？那些属性了可以被继承？"></a>CSS有哪些选择器？优先级？那些属性了可以被继承？</h3><ul>
<li><p>ID选择器 类选择器 标签选择器 伪类选择器  伪元素选择器 属性选择器等等</p>
</li>
<li><p>css3新增<em>层次选择器</em>： p~ul 表示前面有p元素的每个ul元素 部分<em>伪类选择器</em>以及<em>属性选择器</em></p>
</li>
<li><p>优先级： 内联 &gt; ID &gt; 类 &gt; 标签</p>
</li>
<li><p>继承是指给父元素添加一些属性后代元素自动拥有这些属性。（color font-* list-* visibility）</p>
</li>
</ul>
<h3 id="说说em-px-rem-vh-vw区别"><a href="#说说em-px-rem-vh-vw区别" class="headerlink" title="说说em&#x2F;px&#x2F;rem&#x2F;vh&#x2F;vw区别?"></a>说说em&#x2F;px&#x2F;rem&#x2F;vh&#x2F;vw区别?</h3><ul>
<li>px  绝对单位，页面按照精确像素展示</li>
<li>em  相对单位，基准点为父节点字体大小，如果自身设置了font-size按自身来计算；整个页面内的1em不是一个具体的值</li>
<li>rem 相对单位，可理解为root em, 相对根节点html的字体大小来计算</li>
</ul>
<h3 id="隐藏元素的方式有哪些"><a href="#隐藏元素的方式有哪些" class="headerlink" title="隐藏元素的方式有哪些?"></a>隐藏元素的方式有哪些?</h3><ul>
<li><p>display: none; 元素不可见，不占据空间，无法响应点击事件</p>
</li>
<li><p>visibility: hidden; 元素不可见，占据页面空间，无法响应点击事件</p>
</li>
<li><p>opacity: 0; 元素不可见，占据页面空间， 可以响应点击事件</p>
</li>
<li><p>设置with，height为0，元素不可见，不占据空间，无法响应点击事件</p>
</li>
<li><p>position: absolute; 元素不可见，不影响页面布局</p>
</li>
</ul>
<h3 id="谈谈你对BFC的理解？"><a href="#谈谈你对BFC的理解？" class="headerlink" title="谈谈你对BFC的理解？"></a>谈谈你对BFC的理解？</h3><ul>
<li><p><em>BFC</em>: 快级格式化上下文，它是页面的一块渲染区域，并且有一套属于自己的渲染规则。</p>
</li>
<li><p>触发BFC的条件：1. 根元素<br>          2. 浮动元素<br>          3. overflow不为visible<br>          4. display为inline-block flex inline-flex<br>          5. position为absolute fixed</p>
</li>
<li><p>BFC使用场景：1. 防止margin重叠（同一个BFC的两个相邻的子元素的margin会发生重叠）<br>        2. 清除内部浮动(计算BF高度时，浮动子元素也参与计算)<br>        3. 自适应多栏布局（每个元素的左外边距与包含块的左边界相接触（从左到右），即使浮动元素也是如此）（BFC的区域不会与float的元素区域重叠）</p>
</li>
</ul>
<h3 id="元素水平居中的方法？"><a href="#元素水平居中的方法？" class="headerlink" title="元素水平居中的方法？"></a>元素水平居中的方法？</h3><ul>
<li><p>利用定位 + margin:auto</p>
</li>
<li><p>利用定位 + transform</p>
</li>
<li><p>利用定位 + margin:负值</p>
</li>
<li><p>flex布局</p>
</li>
</ul>
<h3 id="flex布局，项目设置css-flex-的取值？（flex-grow-flex-shrink-flex-basis）"><a href="#flex布局，项目设置css-flex-的取值？（flex-grow-flex-shrink-flex-basis）" class="headerlink" title="flex布局，项目设置css flex 的取值？（flex-grow|flex-shrink|flex-basis）"></a>flex布局，项目设置css flex 的取值？（flex-grow|flex-shrink|flex-basis）</h3><h3 id="css3新增了那些属性？"><a href="#css3新增了那些属性？" class="headerlink" title="css3新增了那些属性？"></a>css3新增了那些属性？</h3><ul>
<li>增加了一些选择器: <em>层次选择器</em>(p~ul) <em>伪类选择器</em>（:last-child）  <em>属性选择器</em></li>
<li>增加了一些新样式：<em>border</em> (border-radius|shadow|image) <em>background</em> (background-origin|size|break) <em>文字</em> (ward-wrap|text-overflow|text-shadow) <em>颜色</em> （rgba）</li>
<li><em>transition</em>  (过度) 属性（property） 花费时间(duration) 效果曲线（timing） 延迟时间（delay）</li>
<li><em>transform</em> (转换)： 1. translate 位移 2. scale 缩放 3. rotate 旋转 4.skew 倾斜</li>
<li><em>animation</em> (动画) 动画名称（name） 持续时间（duration） 效果曲线（timing） 延迟时间（delay） 执行次数（iteration-count） 执行方向（direction） 播放状态（state） 填充模式（mode）</li>
<li><em>渐变</em> （线性|径向） liner-gradient radial-grdient</li>
</ul>
<h3 id="css3动画有哪些？"><a href="#css3动画有哪些？" class="headerlink" title="css3动画有哪些？"></a>css3动画有哪些？</h3><ul>
<li>transform</li>
<li>transtion</li>
<li>animation</li>
</ul>
<h3 id="如何优化？css提高性能的方式有哪些？"><a href="#如何优化？css提高性能的方式有哪些？" class="headerlink" title="如何优化？css提高性能的方式有哪些？"></a>如何优化？css提高性能的方式有哪些？</h3><ul>
<li>内联首屏css</li>
<li>异步加载css</li>
<li>css提取为单独的文件 资源压缩</li>
<li>合理使用选择器</li>
<li>减少使用昂贵的属性</li>
<li>不要使用@important</li>
</ul>
<h3 id="对css预编语言的理解，有哪些区别？"><a href="#对css预编语言的理解，有哪些区别？" class="headerlink" title="对css预编语言的理解，有哪些区别？"></a>对css预编语言的理解，有哪些区别？</h3><ul>
<li>代码嵌套</li>
<li>定义变量 less @ sass $</li>
<li>sass不存在全局变量(最好不要定义相同的名称的变量)，less存在局部变量，冒泡查找</li>
<li>混入 sass @mixin  @include; less 混合的用法是指将定义好的ClassA中引入另一个已经定义的Class，也能使用够传递参数，参数变量为@声明</li>
<li>代码模块化 @import</li>
</ul>
<h3 id="圣杯布局-VS-双飞翼布局"><a href="#圣杯布局-VS-双飞翼布局" class="headerlink" title="圣杯布局 VS 双飞翼布局"></a>圣杯布局 VS 双飞翼布局</h3><ul>
<li>相同点：都是三类布局 核心区域优先显示 都使用了浮动</li>
<li>不同点：</li>
</ul>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx操作流程</title>
    <url>/posts/44543/</url>
    <content><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><strong>下载</strong> nginx 的压缩包文件到根目录，官网下载地址：nginx.org&#x2F;download&#x2F;nginx-x.xx.xx.tar.gz</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum update #更新系统软件 服务器的所有软件的版本会更新谨慎操作</span><br><span class="line">cd /</span><br><span class="line">wget nginx.org/download/nginx-1.17.2.tar.gz</span><br></pre></td></tr></table></figure>

<p><strong>解压</strong> tar.gz 压缩包文件，进去 nginx-1.17.2，进入文件夹后进行配置检查</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar nginx-1.17.2.tar.gz</span><br><span class="line">cd nginx-1.17.2</span><br><span class="line">./configure</span><br></pre></td></tr></table></figure>

<p>通过安装前的<strong>配置检查</strong>，发现有报错。检查中发现一些依赖库没有找到，这时候需要先安装 nginx 的一些依赖库<br><img src="/../images/nginx-1.png" alt="检查结果"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install pcre* #安装使nginx支持rewrite</span><br><span class="line">yum -y install zlib*</span><br><span class="line">yum -y install openssl openssl-devel</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>完成后再次进行检查，接着进行编译并安装的操作 <em>这里得特别注意下，你以后需要用到的功能模块是否存在，不然以后添加新的包会比较麻烦。</em></p>
<p>命令 <code>ls nginx-1.17.2</code> 查看 nginx 的文件列表，可以发现里面有一个 auto 的目录。在这个 auto 目录中有一个 options 文件，这个文件里面保存的就是 nginx 编译过程中的所有选项配置。通过命令：<code>cat nginx-1.17.2/auto/options | grep YES</code>就可以查看。</p>
<p><strong>编译并安装</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<p><strong>查看</strong> nginx 安装后在的目录，可以看到已经安装到 &#x2F;usr&#x2F;local&#x2F;nginx 目录了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">whereis nginx</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">nginx: /usr/local/nginx</span></span><br></pre></td></tr></table></figure>

<p><strong>启动 nginx 服务</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/nginx/sbin/</span><br><span class="line">./nginx</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>css position定位?</title>
    <url>/posts/43814/</url>
    <content><![CDATA[<h3 id="position"><a href="#position" class="headerlink" title="position"></a>position</h3><ul>
<li><p>static:元素根据文档的正常流程进行定位。top, right, bottom,left和z-index属性无效。这是默认值。</p>
</li>
<li><p>relative:元素根据文档的正常流程进行定位，然后根据top等值相对于自身进行偏移。偏移量不影响任何其他元素的位置。</p>
</li>
<li><p>absolute:该元素会从正常的文档流中移除，并且不会在页面布局中为该元素创建空间。</p>
</li>
</ul>
<span id="more"></span>

<ul>
<li><p>sticky: 元素根据文档的正常流程进行定位，然后根据top等的值相对于其最近的滚动祖先和包含块（最近的块级祖先）（包括与表格相关的元素）进行偏移。偏移量不会影响任何其他元素的位置。</p>
</li>
<li><p>fixed:该元素会从正常的文档流中移除，并且不会在页面布局中为该元素创建空间。</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>new操作符实现</title>
    <url>/posts/53702/</url>
    <content><![CDATA[<h3 id="new-做了什么？代码如何实现"><a href="#new-做了什么？代码如何实现" class="headerlink" title="new 做了什么？代码如何实现?"></a>new 做了什么？代码如何实现?</h3><ul>
<li>创建一个新对象</li>
<li>设置新对象的原型为构造函数的prototype所指的对象</li>
<li>设置构造函数的this指向这个对象，执行构造函数（为这个对象添加属性）</li>
<li>判断返回值类型返回新对象或引用类型的对象</li>
</ul>
<span id="more"></span>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">objectFactory</span> () &#123;</span><br><span class="line">    <span class="keyword">let</span> newObj = <span class="literal">null</span>,</span><br><span class="line">        constructor = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">shift</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>),</span><br><span class="line">        result = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> constructor !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    newObj = <span class="title class_">Object</span>.<span class="title function_">create</span>(constructor.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line">    result = constructor.<span class="title function_">apply</span>(newObj, <span class="variable language_">arguments</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> flag = reult &amp;&amp; (<span class="keyword">typeof</span> result === <span class="string">&#x27;object&#x27;</span> || <span class="keyword">typeof</span> result === <span class="string">&#x27;function&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> flag ? result : newObj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>promise 实现</title>
    <url>/posts/46982/</url>
    <content><![CDATA[<blockquote>
<p>Promise的概念对于初学者来说一直很抽象，我们可以举个例子：比如你是个经销商，你要去工厂订货，拿到货后你才能自己销售。那么你和工厂之前立下一个契约，保证工厂在在完成生产后通知你，或者就算是因某种原因出错了而无法生产也会通知到你。那么此时这里的契约就相当于我们要讲述的promise，promise就像是个特殊的对象，连接了工厂的生产行为和你的消费行为，是生产者和消费者间的纽带。</p>
</blockquote>
<span id="more"></span>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Promise</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">excutor</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">value</span> = <span class="literal">undefined</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">reason</span> = <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">onResolvedCallbacks</span> = []</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span> = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="title function_">resolve</span> = (<span class="params">value</span>) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">value</span> = value</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">onResolvedCallbacks</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">fn</span> =&gt;</span> <span class="title function_">fn</span>())</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="title function_">reject</span> = (<span class="params">reason</span>) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">reason</span> = reason</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">fn</span> =&gt;</span> <span class="title function_">fn</span>())</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="title function_">excutor</span>(resolve, reject)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">        <span class="comment">// if (this.state === &#x27;fulfilled&#x27;) &#123;</span></span><br><span class="line">        <span class="comment">//     onFulfilled(this.value)</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// if (this.state === &#x27;rejected&#x27;) &#123;</span></span><br><span class="line">        <span class="comment">//     onRejected(this.reason)</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// if (this.state === &#x27;pending&#x27;) &#123;</span></span><br><span class="line">        <span class="comment">//     this.onResolvedCallbacks.push(() =&gt; &#123;</span></span><br><span class="line">        <span class="comment">//         onFulfilled(this.value)</span></span><br><span class="line">        <span class="comment">//     &#125;)</span></span><br><span class="line">        <span class="comment">//     this.onResolvedCallbacks.push(() =&gt; &#123;</span></span><br><span class="line">        <span class="comment">//         onRejected(this.reason)</span></span><br><span class="line">        <span class="comment">//     &#125;)</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// 解决 onFulfilled,onRejected没传值得问题</span></span><br><span class="line">        onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">&#x27;function&#x27;</span> ? onFulfilled : <span class="function"><span class="params">v</span> =&gt;</span> v</span><br><span class="line">        onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span> ? onRejected : <span class="function"><span class="params">err</span> =&gt;</span> &#123; <span class="keyword">throw</span> err &#125;</span><br><span class="line">        <span class="comment">// then 的链式调用</span></span><br><span class="line">        <span class="keyword">let</span> promise2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="string">&#x27;fulfilled&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">let</span> x = <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>)</span><br><span class="line">                    <span class="title function_">resolvePromise</span>(promise2, x, resolve, reject)</span><br><span class="line">                &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                    <span class="title function_">reject</span>(e)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="string">&#x27;rejected&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">let</span> x = <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>)</span><br><span class="line">                    <span class="title function_">resolvePromise</span>(promise2, x, resolve, reject)</span><br><span class="line">                &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                    <span class="title function_">reject</span>(e)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">onResolvedCallbacks</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">let</span> x = <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>)</span><br><span class="line">                        <span class="title function_">resolvePromise</span>(promise2, x, resolve, reject)</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                        <span class="title function_">reject</span>(e)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">onRejectedCallbacks</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">let</span> x = <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>)</span><br><span class="line">                        <span class="title function_">resolvePromise</span>(promise2, x, resolve, reject)</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                        <span class="title function_">reject</span>(e)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> promise2</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">resolve</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(data)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">reject</span>(<span class="params">err</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>(err)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">resolvePromise</span> = (<span class="params">promise2, x, resolve, reject</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (x === promise2) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;Chaining cycle detected for promise #&lt;Promise&gt;&#x27;</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> called;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">typeof</span> x === <span class="string">&#x27;object&#x27;</span> &amp;&amp; x !== <span class="literal">null</span>) || <span class="keyword">typeof</span> x === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> then = x.<span class="property">then</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> then === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">                then.<span class="title function_">call</span>(x, <span class="function"><span class="params">y</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (called) <span class="keyword">return</span></span><br><span class="line">                    called = <span class="literal">true</span></span><br><span class="line">                    <span class="title function_">resolvePromise</span>(promise2, y, resolve, reject)</span><br><span class="line">                &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (called) <span class="keyword">return</span></span><br><span class="line">                    called = <span class="literal">true</span></span><br><span class="line">                    <span class="title function_">reject</span>(err)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">            <span class="keyword">if</span> (called) <span class="keyword">return</span></span><br><span class="line">            called = <span class="literal">true</span></span><br><span class="line">            <span class="title function_">reject</span>(err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(x)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">catch</span> = <span class="keyword">function</span> (<span class="params">errCallback</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(<span class="literal">null</span>, errCallback)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">finally</span> = <span class="keyword">function</span> (<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="title function_">callback</span>()).<span class="title function_">then</span>(<span class="function">() =&gt;</span> value)</span><br><span class="line">    &#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="title function_">callback</span>()).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123; <span class="keyword">throw</span> reason &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property">all</span> = <span class="keyword">function</span> (<span class="params">promises</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(promises)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;传入的参数必须是数组&#x27;</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> res = []</span><br><span class="line">        <span class="keyword">const</span> counter = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(promises[i]).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">                counter++;</span><br><span class="line">                res[i] = value</span><br><span class="line">                <span class="keyword">if</span> (counter === promises.<span class="property">length</span>) &#123;</span><br><span class="line">                    <span class="title function_">resolve</span>(res)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> <span class="title function_">reject</span>(err))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property">race</span> = <span class="keyword">function</span> (<span class="params">promises</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> val = promises[i]</span><br><span class="line">            <span class="keyword">if</span> (val &amp;&amp; <span class="keyword">typeof</span> val.<span class="property">then</span> === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">                val.<span class="title function_">then</span>(resolve, reject)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(val)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>mySql操作流程</title>
    <url>/posts/44543/</url>
    <content><![CDATA[<h3 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h3><hr>
<ol>
<li><h3 id="说明：创建数据库"><a href="#说明：创建数据库" class="headerlink" title="说明：创建数据库"></a>说明：创建数据库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE dbname</span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="说明：删除数据库"><a href="#说明：删除数据库" class="headerlink" title="说明：删除数据库"></a>说明：删除数据库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> databse dbname</span><br></pre></td></tr></table></figure>


</li>
<li><h3 id="说明：创建新表"><a href="#说明：创建新表" class="headerlink" title="说明：创建新表"></a>说明：创建新表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tablename(col1 type1 [<span class="keyword">not</span> <span class="keyword">null</span>] [<span class="keyword">primary</span> key],col2 type2 [<span class="keyword">not</span> <span class="keyword">null</span>],..)</span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="说明：删除新表"><a href="#说明：删除新表" class="headerlink" title="说明：删除新表"></a>说明：删除新表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> tablename</span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="说明：增加一个列"><a href="#说明：增加一个列" class="headerlink" title="说明：增加一个列"></a>说明：增加一个列</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Alter</span> <span class="keyword">table</span> tablename <span class="keyword">add</span> <span class="keyword">column</span> col type</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注：</strong>列增加后将不能删除。<code>DB2</code> 中列加上后数据类型也不能改变，唯一能改变的是增加 <code>varchar </code>类型的长度。</p>
</blockquote>
</li>
<li><h3 id="说明：添加主键"><a href="#说明：添加主键" class="headerlink" title="说明：添加主键"></a>说明：添加主键</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Alter</span> <span class="keyword">table</span> tablename <span class="keyword">add</span> <span class="keyword">primary</span> key(col)</span><br><span class="line"><span class="comment">-- 删除主键</span></span><br><span class="line"><span class="keyword">Alter</span> <span class="keyword">table</span> tablename <span class="keyword">drop</span> <span class="keyword">primary</span> key(col)</span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="说明：创建索引"><a href="#说明：创建索引" class="headerlink" title="说明：创建索引"></a>说明：创建索引</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> [<span class="keyword">unique</span>] index idxname <span class="keyword">on</span> tablename(col...)</span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="说明：删除索引"><a href="#说明：删除索引" class="headerlink" title="说明：删除索引"></a>说明：删除索引</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> INDEX index_name <span class="keyword">ON</span> table_name</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注：</strong>索引是不可更改的，想更改必须删除重新建。</p>
</blockquote>
</li>
<li><h3 id="说明：创建视图"><a href="#说明：创建视图" class="headerlink" title="说明：创建视图"></a>说明：创建视图</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> viewnamee <span class="keyword">as</span> <span class="keyword">select</span> statement</span><br><span class="line"><span class="comment">--删除视图</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> viewname</span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="说明：几个基本的sql语句"><a href="#说明：几个基本的sql语句" class="headerlink" title="说明：几个基本的sql语句"></a>说明：几个基本的sql语句</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 选择</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tablename <span class="keyword">where</span> 范围</span><br><span class="line"><span class="comment">-- 插入</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tablename(field1,field2) <span class="keyword">values</span> (value1,value2)</span><br><span class="line"><span class="comment">-- 删除</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tablename <span class="keyword">where</span> 范围</span><br><span class="line"><span class="comment">-- 更新</span></span><br><span class="line"><span class="keyword">update</span> tablename <span class="keyword">set</span> field1<span class="operator">=</span>value1 <span class="keyword">where</span> 范围</span><br><span class="line"><span class="comment">-- 查找</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tablename <span class="keyword">where</span> field1 link <span class="string">&#x27;%value1%&#x27;</span></span><br><span class="line"><span class="comment">-- 排序</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tablename <span class="keyword">order</span> <span class="keyword">by</span> field1,field2 [<span class="keyword">desc</span>]</span><br><span class="line"><span class="comment">-- 总数</span></span><br><span class="line"><span class="keyword">select</span> count <span class="keyword">as</span> totalcount <span class="keyword">from</span> tablename</span><br><span class="line"><span class="comment">-- 求和</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(field1) <span class="keyword">as</span> sumvalue <span class="keyword">from</span> tablename</span><br><span class="line"><span class="comment">-- 平均</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(field1) <span class="keyword">as</span> avgvalue <span class="keyword">from</span> tablename</span><br><span class="line"><span class="comment">-- 最大</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(field1) <span class="keyword">as</span> maxvalue <span class="keyword">from</span> tablename</span><br><span class="line"><span class="comment">-- 最小</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">min</span>(field1) <span class="keyword">as</span> minvalue <span class="keyword">from</span> tablename</span><br></pre></td></tr></table></figure>
</li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>Sql</tag>
      </tags>
  </entry>
  <entry>
    <title>this相关</title>
    <url>/posts/49260/</url>
    <content><![CDATA[<h3 id="全局执行上下文"><a href="#全局执行上下文" class="headerlink" title="全局执行上下文"></a>全局执行上下文</h3><ul>
<li>非严格模式和严格模式中this都是指向顶层对象，浏览器中即为<em>window</em></li>
</ul>
<h3 id="函数执行上下文"><a href="#函数执行上下文" class="headerlink" title="函数执行上下文"></a>函数执行上下文</h3><ul>
<li>严格模式中，普通函数的this的表现不同，表现为<em>undefined</em></li>
<li>如果调用者函数，被某一个对象所拥有，那么该函数在调用时，内部的this指向该对象。如果函数独立调用，那么该函数内部的this，则指向<em>undefined</em>。但是在非严格模式中，this会自动指向<em>window</em>。</li>
</ul>
<span id="more"></span>

<h3 id="new操作符做了那些事情？"><a href="#new操作符做了那些事情？" class="headerlink" title="new操作符做了那些事情？"></a>new操作符做了那些事情？</h3><ul>
<li>创建了一个全新的对象</li>
<li>这个对象会被执行 [[Prototype]] 链接</li>
<li>生成的新对象会绑定到函数调用的this</li>
<li>通过new创建的对象最终被 [[Prorotypr]] 链接到这个函数的prototype对象上。<img src="https://mmbiz.qpic.cn/mmbiz_jpg/PeB3s8AJwnZQlqXh6BNEBBOPuppuPpXVFBndz6ibkt2RMgYekU4LRrmQKf7O48iaNq0pAz0PUQpK4cIJZQaiahZgw/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="原型链"></li>
<li>如果函数中没有返回对象类型Object,那么new表达式中的函数调用会自动返回这个新的对象。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">newOperator</span> = ctor =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> ctor !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    newOperator.<span class="property">target</span> = ctor</span><br><span class="line">    <span class="keyword">const</span> newObj = <span class="title class_">Object</span>.<span class="title function_">create</span>(ctor.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line">    <span class="keyword">const</span> argsArr = [].<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>,<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">const</span> result = ctor.<span class="title function_">apply</span>(newObj,argsArr)</span><br><span class="line">    <span class="keyword">var</span> isObject = <span class="keyword">typeof</span> result === <span class="string">&#x27;object&#x27;</span> &amp;&amp; result !== <span class="literal">null</span></span><br><span class="line">    <span class="keyword">var</span> isFunction = <span class="keyword">typeof</span> result === <span class="string">&#x27;function&#x27;</span></span><br><span class="line">    <span class="keyword">if</span>(isObject || isFunction)&#123;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newObj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="call"><a href="#call" class="headerlink" title="call"></a>call</h3><ul>
<li>call() 方法在使用一个指定的 <em>this</em> 值和若干个指定的参数值的前提下调用某个函数或方法。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">call</span> = <span class="function">(<span class="params">context</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> context = <span class="title class_">Object</span>(context) || <span class="variable language_">window</span>;</span><br><span class="line">    context.<span class="property">fn</span> = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="comment">// 参数问题</span></span><br><span class="line">    <span class="keyword">const</span> args = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        args.<span class="title function_">push</span>(<span class="string">&#x27;arguments[&#x27;</span> + i + <span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="built_in">eval</span>(<span class="string">&#x27;context.fn(&#x27;</span>+ args +<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">    <span class="keyword">delete</span> context.<span class="property">fn</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h3><ul>
<li>apply() 方法在使用一个指定的 <em>this</em> 值和若干个指定的参数值的前提下调用某个函数或方法。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">apply</span> = <span class="function">(<span class="params">context, arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> context = <span class="title class_">Object</span>(context) || <span class="variable language_">window</span>;</span><br><span class="line">    context.<span class="property">fn</span> = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="comment">// 参数问题</span></span><br><span class="line">    <span class="keyword">const</span> result;</span><br><span class="line">    <span class="keyword">if</span> (!arr) &#123;</span><br><span class="line">        result = context.<span class="title function_">fn</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result = context.<span class="title function_">fn</span>(...arr)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> context.<span class="property">fn</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>React Hooks useEffect</title>
    <url>/posts/undefined/</url>
    <content><![CDATA[<h3 id="useEffect-简介"><a href="#useEffect-简介" class="headerlink" title="useEffect 简介"></a><em>useEffect 简介</em></h3><p><strong>1.1 为什么要有 useEffect</strong></p>
<p>React Hooks 使得 Functional Component 拥有 Class Component 的特性，其主要动机包括：</p>
<ol>
<li>在组件之间复用状态逻辑很难</li>
<li>复杂组件变得难以理解</li>
<li>难以理解的 class<br>对于第二点，首先，针对 Class Component 来说，我们写 React 应用时经常要在组件的各种生命周期中编写代码，如在 <code>componentDidMount</code> 和 <code>componentDidUpdate</code> 中发送 HTTP 请求、事件绑定、甚至做一些额外的逻辑，使得业务逻辑扎堆在组件的生命周期函数中。在这个时候，我们的编程思路是“在组件装载完毕时我们需要做什么”、“在组件更新时我们需要做什么”，这使得 React 开发成为了<strong>面向生命周期编程</strong>，而我们在生命周期中写的那些逻辑，则成了组件生命周期函数的<strong>副作用</strong>。<br>其次，面向生命周期编程会导致业务逻辑散乱在各生命周期函数里。比如，我们在 componentDidMount 进行的事件绑定又需要在 componentDidUnmount 解绑，那事件管理的逻辑就不统一，代码零散 review 起来会比较麻烦：</li>
</ol>
<span id="more"></span>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Componment</span> &#123;</span><br><span class="line">	<span class="title function_">componmentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;js_button&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="variable language_">this</span>.<span class="property">log</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="title function_">componentDidUnmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;js_button&#x27;</span>).<span class="title function_">removeEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="variable language_">this</span>.<span class="property">log</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	log = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;log&#x27;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;js_button&quot;</span>&gt;</span>button<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而 useEffect 的出现，则让开发者的关注点从生命周期重新抽离出来聚焦在业务逻辑之上，其实 effect 的全称就是 side effect，即副作用，useEffect 就是用来处理原本生命周期函数里的副作用逻辑。</p>
<p><strong>1.2 useEffect 的用法</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">A</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">log</span>(<span class="params"></span>) &#123;    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;log&#x27;</span>)  &#125;</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;js_button&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, log)</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;js_button&#x27;</span>).<span class="title function_">removeEventListener</span>(<span class="string">&#x27;click&#x27;</span>, log)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (<span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;js_button&quot;</span>&gt;</span>button<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>useEffect 接受两个参数，第一个参数是一个 function，其实现 bind 操作并将 unbind 作为一个 thunk 函数被返回。第二个参数是一个可选的 dependencies 数组，如果 dependencies 不存在，那么 function 每次 render 都会执行；如果 dependencies 存在，只有当它发生了变化，function 才会执行。由此我们也可以推知，如果 dependencies 是一个空数组，那么当且仅当首次 render 的时候才会执行 function。</p>
<h3 id="2-useEffect-的原理与简单实现"><a href="#2-useEffect-的原理与简单实现" class="headerlink" title="2. useEffect 的原理与简单实现"></a><em>2. useEffect 的原理与简单实现</em></h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> _deps</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useEffect</span>(<span class="params">callback, dependencies</span>) &#123;</span><br><span class="line">	<span class="keyword">const</span> hasChanged = (_deps &amp;&amp; !dependencies.<span class="title function_">every</span>(<span class="function">(<span class="params">el, i</span>) =&gt;</span> el === _deps[i])) || <span class="literal">true</span> <span class="comment">// 如果 dependencies 不存在，或者 dependencies 有变化，就执行 callback</span></span><br><span class="line">	<span class="keyword">if</span> (!dependencies || hasChanged) &#123;</span><br><span class="line">		<span class="title function_">callback</span>()</span><br><span class="line">		_deps = dependencies</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-useEffect-源码解析"><a href="#3-useEffect-源码解析" class="headerlink" title="3. useEffect 源码解析"></a><em>3. useEffect 源码解析</em></h3><p><strong>3.1 mountEffect &amp; updateEffect</strong></p>
<p><code>useEffect</code>的入口和<code>useState<code>的一样，都在 ReactFiberHooks.js 这个文件中，并且同 useState 一样，在首次加载时 useEffect 实际执行的是 mountEffect，之后每次渲染执行的是 updateEffect，此处不再赘述。那我们需要重点看看 mountEffect 和 updateEffect 实际做了什么。</p>
<p>对于 mountEffect：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mountEffect</span>(<span class="params">create: () =&gt; (() =&gt; <span class="keyword">void</span>) | <span class="keyword">void</span>, deps: <span class="built_in">Array</span>&lt;mixed&gt; | <span class="keyword">void</span> | <span class="literal">null</span></span>): <span class="keyword">void</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="title function_">mountEffectImpl</span>(<span class="title class_">UpdateEffect</span> | <span class="title class_">PassiveEffect</span>, <span class="title class_">UnmountPassive</span> | <span class="title class_">MountPassive</span>, create, deps)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于 updateEffect：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">updateEffect</span>(<span class="params">create: () =&gt; (() =&gt; <span class="keyword">void</span>) | <span class="keyword">void</span>, deps: <span class="built_in">Array</span>&lt;mixed&gt; | <span class="keyword">void</span> | <span class="literal">null</span></span>): <span class="keyword">void</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="title function_">updateEffectImpl</span>(<span class="title class_">UpdateEffect</span> | <span class="title class_">PassiveEffect</span>, <span class="title class_">UnmountPassive</span> | <span class="title class_">MountPassive</span>, create, deps)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看一下 ReactSideEffectTags.js 与 ReactHookEffectTags.js 中的定义：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Don&#x27;t change these two values. They&#x27;re used by React Dev Tools.export const NoEffect = /*              */ 0b0000000000000;export const PerformedWork = /*         */ 0b0000000000001;</span></span><br><span class="line"><span class="comment">// You can change the rest (and add more).export const Placement = /*             */ 0b0000000000010;export const Update = /*                */ 0b0000000000100;export const PlacementAndUpdate = /*    */ 0b0000000000110;export const Deletion = /*              */ 0b0000000001000;export const ContentReset = /*          */ 0b0000000010000;export const Callback = /*              */ 0b0000000100000;export const DidCapture = /*            */ 0b0000001000000;export const Ref = /*                   */ 0b0000010000000;export const Snapshot = /*              */ 0b0000100000000;export const Passive = /*               */ 0b0001000000000;export const Hydrating = /*             */ 0b0010000000000;export const HydratingAndUpdate = /*    */ 0b0010000000100;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">NoEffect</span> = <span class="comment">/*             */</span> <span class="number">0b00000000</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">UnmountSnapshot</span> = <span class="comment">/*      */</span> <span class="number">0b00000010</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">UnmountMutation</span> = <span class="comment">/*      */</span> <span class="number">0b00000100</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">MountMutation</span> = <span class="comment">/*        */</span> <span class="number">0b00001000</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">UnmountLayout</span> = <span class="comment">/*        */</span> <span class="number">0b00010000</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">MountLayout</span> = <span class="comment">/*          */</span> <span class="number">0b00100000</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">MountPassive</span> = <span class="comment">/*         */</span> <span class="number">0b01000000</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">UnmountPassive</span> = <span class="comment">/*       */</span> <span class="number">0b10000000</span></span><br></pre></td></tr></table></figure>

<p>这么设计是为了简化类型比较与类型复合，如果项目开发的过程中有过一些复合权限系统的设计经验，那么可能第一眼就能反应过来，所以 <code>UnmountPassive|MountPassive</code> 就是 0b11000000。如果对应的位为非零，则表示 tag 实现了指定的行为。这个在未来会用到，我们这里先不涉及，所以就先放在这里了解即可。</p>
<p><strong>3.2 mountEffectImpl &amp; updateEffectImpl</strong></p>
<p>首先是 <code>mountEffectImpl</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mountEffectImpl</span>(<span class="params">fiberEffectTag, hookEffectTag, create, deps</span>): <span class="keyword">void</span> &#123;</span><br><span class="line">	<span class="keyword">const</span> hook = <span class="title function_">mountWorkInProgressHook</span>() <span class="comment">// 创建一个新的 Hook 并返回当前 workInProgressHook</span></span><br><span class="line">	<span class="keyword">const</span> nextDeps = deps === <span class="literal">undefined</span> ? <span class="literal">null</span> : deps</span><br><span class="line">	sideEffectTag |= fiberEffectTag</span><br><span class="line">	hook.<span class="property">memoizedState</span> = <span class="title function_">pushEffect</span>(hookEffectTag, create, <span class="literal">undefined</span>, nextDeps)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>mountWorkInProgressHook</code> 其就是创建一个新的 Hook 并返回当前 workInProgressHook，具体原理不再赘述。</p>
<p><code>sideEffectTag</code> 是按位或上 <code>fiberEffectTag</code> 然后赋值，在 renderWithHooks 中挂载在 renderedWork.effectTag 上，并在每次渲染后重置为 0。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">renderedWork.<span class="property">effectTag</span> |= sideEffectTag</span><br><span class="line">sideEffectTag = <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>其次是 <code>updateEffectImpl</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">updateEffectImpl</span>(<span class="params">fiberEffectTag, hookEffectTag, create, deps</span>): <span class="keyword">void</span> &#123;</span><br><span class="line">	<span class="keyword">const</span> hook = <span class="title function_">updateWorkInProgressHook</span>() <span class="comment">// 获取当前正在工作中的 Hook  const nextDeps = deps === undefined ? null : deps;  let destroy = undefined;</span></span><br><span class="line">	<span class="keyword">if</span> (currentHook !== <span class="literal">null</span>) &#123;</span><br><span class="line">		<span class="keyword">const</span> prevEffect = currentHook.<span class="property">memoizedState</span></span><br><span class="line">		destroy = prevEffect.<span class="property">destroy</span></span><br><span class="line">		<span class="keyword">if</span> (nextDeps !== <span class="literal">null</span>) &#123;</span><br><span class="line">			<span class="keyword">const</span> prevDeps = prevEffect.<span class="property">deps</span></span><br><span class="line">			<span class="keyword">if</span> (<span class="title function_">areHookInputsEqual</span>(nextDeps, prevDeps)) &#123;</span><br><span class="line">				<span class="title function_">pushEffect</span>(<span class="title class_">NoHookEffect</span>, create, destroy, nextDeps)</span><br><span class="line">				<span class="keyword">return</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	sideEffectTag |= fiberEffectTag</span><br><span class="line">	hook.<span class="property">memoizedState</span> = <span class="title function_">pushEffect</span>(hookEffectTag, create, destroy, nextDeps)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>updateWorkInProgressHook 其就是获取当前正在工作中的 Hook，具体原理不再赘述。</p>
<p>可以发现在 currentHook 为空的时候， updateEffectImpl 的逻辑与 mountEffectImpl 的逻辑是一模一样的；当 currentHook 不为空的时候， pushEffect 的第三个参数不是 undefined，而是 destroy。并且，在这个分支存在 areHookInputsEqual(nextDeps,prevDeps)，即如果当前 useEffect 的 deps 和上一阶段的 useEffect 的 deps 相等（ areHookInputsEqual 所做的事情就是遍历比较两个 deps 是否相等，这里就不展开解读了），那就执行 pushEffect(NoHookEffect,create,destroy,nextDeps);，大胆猜测 NoHookEffect 的意思就是不执行这次的 useEffect。如此，这段代码的逻辑就和我们之前自己实现的 useEffect 是一致的。<br>currentHook 就是当前阶段正在处理的 Hook，其正常逻辑下不会为空。那我们接下来需要重点关注的应该是 pushEffect 做了什么，其第三个参数有什么含义？</p>
<p><strong>3.3 pushEffect</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">pushEffect</span>(<span class="params">tag, create, destroy, deps</span>) &#123;</span><br><span class="line">	<span class="comment">// 声明一个新的 effect</span></span><br><span class="line">	<span class="keyword">const</span> <span class="attr">effect</span>: <span class="title class_">Effect</span> = &#123;</span><br><span class="line">		tag,</span><br><span class="line">		create,</span><br><span class="line">		destroy,</span><br><span class="line">		deps, <span class="comment">// Circular</span></span><br><span class="line">		<span class="attr">next</span>: (<span class="attr">null</span>: any) <span class="comment">// 函数组件中定义的下一个 effect 的引用</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (componentUpdateQueue === <span class="literal">null</span>) &#123;</span><br><span class="line">		componentUpdateQueue = <span class="title function_">createFunctionComponentUpdateQueue</span>() <span class="comment">// 初始化 componentUpdateQueue</span></span><br><span class="line">		componentUpdateQueue.<span class="property">lastEffect</span> = effect.<span class="property">next</span> = effect</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">const</span> lastEffect = componentUpdateQueue.<span class="property">lastEffect</span></span><br><span class="line">		<span class="keyword">if</span> (lastEffect === <span class="literal">null</span>) &#123;</span><br><span class="line">			componentUpdateQueue.<span class="property">lastEffect</span> = effect.<span class="property">next</span> = effect</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">const</span> firstEffect = lastEffect.<span class="property">next</span></span><br><span class="line">			lastEffect.<span class="property">next</span> = effect</span><br><span class="line">			effect.<span class="property">next</span> = firstEffect</span><br><span class="line">			componentUpdateQueue.<span class="property">lastEffect</span> = effect</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> effect</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">type <span class="title class_">Effect</span> = &#123;</span><br><span class="line">	<span class="attr">tag</span>: <span class="title class_">HookEffectTag</span>, <span class="comment">// 一个二进制数，它将决定 effect 的行为</span></span><br><span class="line">	<span class="attr">create</span>: <span class="function">() =&gt;</span> (<span class="function">() =&gt;</span> <span class="keyword">void</span>) | <span class="keyword">void</span>, <span class="comment">// 绘制后应该运行的回调</span></span><br><span class="line">	<span class="attr">destroy</span>: (<span class="function">() =&gt;</span> <span class="keyword">void</span>) | <span class="keyword">void</span>, <span class="comment">// 用于确定是否应销毁和重新创建 effect</span></span><br><span class="line">	<span class="attr">deps</span>: <span class="title class_">Array</span>&lt;mixed&gt; | <span class="literal">null</span> <span class="comment">// 决定重绘制后是否执行的 deps  next: Effect, // 函数组件中定义的下一个 effect 的引用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个函数首先根据入参声明了一个新的 effect，数据结构也给出来了，它同样也是一个循环链表。tag 是</p>
<p>接下来根据 componentUpdateQueue 是否为空走两套逻辑，而 componentUpdateQueue 的结构其实很简单:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> type <span class="title class_">FunctionComponentUpdateQueue</span> = &#123; <span class="attr">lastEffect</span>: <span class="title class_">Effect</span> | <span class="literal">null</span> &#125;</span><br></pre></td></tr></table></figure>

<p>可见，componentUpdateQueue 其实就是一个存储 Effect 的全局变量。</p>
<ol>
<li><p>componentUpdateQueue 为空：这种情况就是 mountEffect 时候的逻辑，它会创建一个空的 componentUpdateQueue，它其实只是 {lastEffect:null}，之后将 componentUpdateQueue.lastEffect 指向 effect.next，其实就是存了一下 effect。</p>
</li>
<li><p>componentUpdateQueue 不为空：这种情况就是 updateEffect 时候会走到的逻辑</p>
</li>
<li><p>lastEffect 为空：这种情况是新的渲染阶段的第一个 useEffect，逻辑处理和 componentUpdateQueue 为空时一致。</p>
</li>
<li><p>lastEffect 不为空：这种情况意味着这个组件有多个 useEffect，是第二个及其之后的 useEffect 会走到的分支，将 lastEffect 指向下一个 effect。</p>
</li>
</ol>
<p>最后 return 一个 effect。</p>
]]></content>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>并发请求</title>
    <url>/posts/61346/</url>
    <content><![CDATA[<h4 id="现有-100-个请求需要发送，请设计一个算法，使用-Promise-来控制并发（并发数量最大为-10），来完成-100-个请求；"><a href="#现有-100-个请求需要发送，请设计一个算法，使用-Promise-来控制并发（并发数量最大为-10），来完成-100-个请求；" class="headerlink" title="现有 100 个请求需要发送，请设计一个算法，使用 Promise 来控制并发（并发数量最大为 10），来完成 100 个请求；"></a>现有 100 个请求需要发送，请设计一个算法，使用 Promise 来控制并发（并发数量最大为 10），来完成 100 个请求；</h4><ul>
<li>生成 100 个请求。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> requestList = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: <span class="number">100</span> &#125;, <span class="function">(<span class="params">_, i</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function">() =&gt;</span></span><br><span class="line">		<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">			<span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">				<span class="keyword">if</span> (i === <span class="number">20</span>) &#123;</span><br><span class="line">					<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`error <span class="subst">$&#123;i&#125;</span>`</span>))</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`done <span class="subst">$&#123;i&#125;</span>`</span>)</span><br><span class="line">					<span class="title function_">resolve</span>(i)</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;, <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">1000</span>)</span><br><span class="line">		&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ol>
<li>使用<code>Promise.allSettled</code>，为什么不用 <code>Promise.all</code>？会不会阻塞？</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">concurrentRequest</span> = <span class="keyword">async</span> (<span class="params">concurrentLimit</span>) =&gt; &#123;</span><br><span class="line">	<span class="keyword">while</span> (requestList.<span class="property">length</span>) &#123;</span><br><span class="line">		<span class="keyword">const</span> group = requestList.<span class="title function_">splice</span>(<span class="number">0</span>, concurrentLimit)</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">allSettled</span>(group.<span class="title function_">map</span>(<span class="function">(<span class="params">fn</span>) =&gt;</span> <span class="title function_">fn</span>()))</span><br><span class="line">			<span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">		&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">			<span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<ol start="2">
<li>最终版</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">concurrentRequest</span>(<span class="params">concurrentLimit</span>) &#123;</span><br><span class="line">	<span class="keyword">const</span> runningPool = []</span><br><span class="line">	<span class="keyword">const</span> waitingQueue = requestList.<span class="title function_">slice</span>()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (waitingQueue.<span class="property">length</span> || runningPool.<span class="property">length</span>) &#123;</span><br><span class="line">		<span class="comment">// 填充运行池</span></span><br><span class="line">		<span class="keyword">while</span> (runningPool.<span class="property">length</span> &lt; concurrentLimit &amp;&amp; waitingQueue.<span class="property">length</span>) &#123;</span><br><span class="line">			<span class="keyword">const</span> request = waitingQueue.<span class="title function_">shift</span>()</span><br><span class="line">			<span class="keyword">const</span> promise = <span class="title function_">request</span>()</span><br><span class="line">			runningPool.<span class="title function_">push</span>(promise)</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 当请求完成时，从运行池中移除，并保存结果</span></span><br><span class="line">			promise</span><br><span class="line">				.<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">					<span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">				&#125;)</span><br><span class="line">				.<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">					<span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">				&#125;)</span><br><span class="line">				.<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">					runningPool.<span class="title function_">splice</span>(runningPool.<span class="title function_">indexOf</span>(promise), <span class="number">1</span>)</span><br><span class="line">				&#125;)</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 等待当前运行池中的 Promise 完成</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">race</span>(runningPool)</span><br><span class="line">		&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">			<span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>执行上下文与闭包</title>
    <url>/posts/13524/</url>
    <content><![CDATA[<h3 id="什么是执行上下文？"><a href="#什么是执行上下文？" class="headerlink" title="什么是执行上下文？"></a>什么是执行上下文？</h3><ul>
<li>评估和执行代码的环境的抽象概念</li>
</ul>
<h3 id="JavaScript中的几种执行上下文"><a href="#JavaScript中的几种执行上下文" class="headerlink" title="JavaScript中的几种执行上下文"></a>JavaScript中的几种执行上下文</h3><ol>
<li>全局执行执行上下文<br>创建一个全局的window对象，并设置this等于这个全局对象，一个程序只有一个全局执行上下文。</li>
<li>函数执行上下文<br>每当一个函数被调用时，都会为该函数创建一个执行上下文。</li>
<li>eval执行上文<br>执行在eval函数内部的代码时也会有属于他自己的执行上下。</li>
</ol>
<span id="more"></span>

<ul>
<li>执行上下文是代码执行时由JavaScript引擎创建的。</li>
<li>执行栈，也就是在其它编程语言中所说的“调用栈”，是一种拥有 LIFO（后进先出）数据结构的栈，被用来存储代码运行时创建的所有执行上下文。</li>
</ul>
<h3 id="怎么创建执行上下文"><a href="#怎么创建执行上下文" class="headerlink" title="怎么创建执行上下文"></a>怎么创建执行上下文</h3><ol>
<li>this绑定</li>
<li>创建词法环境组件</li>
<li>创建变量环境组件</li>
</ol>
<ul>
<li>this绑定，全局执行上下文中，this执向全局对象，函数执行上下文中，this谁调用执向谁，没人调用指向window。</li>
<li>词法环境(一种持有标识符—变量映射的结构),在其内部有两个组件：<ol>
<li><em>环境记录</em>是存储变量和函数申明的实际位置。</li>
<li><em>外部环境的引用记录</em>意味着它可以访问其父级词法环境(作用域)。</li>
</ol>
</li>
<li>从执行上下文分析可以存在两种词法环境；<ol>
<li>全局执行上下文中的词法环境中：外部引用为null,它拥有内建的Object&#x2F;Araay等;环境记录器存储用户自定义的全局变量，并且this指向全局变量。</li>
<li>函数执行上下文中：函数内部定义的变量存储在环境记录器中；并且引用的外部环境可以是全局环境，或者包含此内部函数的外部函数。</li>
</ol>
</li>
<li>变量环境组件也是一种此法组件；</li>
</ul>
<h3 id="执行阶段"><a href="#执行阶段" class="headerlink" title="执行阶段"></a>执行阶段</h3><ul>
<li>变量赋值</li>
<li>函数的引用</li>
<li>执行其他代码</li>
</ul>
<h3 id="经典面试题"><a href="#经典面试题" class="headerlink" title="经典面试题"></a>经典面试题</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> scope = <span class="string">&quot;global scope&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkscope</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> scope = <span class="string">&quot;local scope&quot;</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> scope;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">f</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">checkscope</span>();</span><br><span class="line"><span class="comment">// 模拟执行栈</span></span><br><span class="line"><span class="title class_">ECStack</span>.<span class="title function_">push</span>(&lt;checkscope&gt; functionContext);</span><br><span class="line"><span class="title class_">ECStack</span>.<span class="title function_">push</span>(&lt;f&gt; functionContext);</span><br><span class="line"><span class="title class_">ECStack</span>.<span class="title function_">pop</span>();</span><br><span class="line"><span class="title class_">ECStack</span>.<span class="title function_">pop</span>();</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> scope = <span class="string">&quot;global scope&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkscope</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> scope = <span class="string">&quot;local scope&quot;</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> scope;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">checkscope</span>()();</span><br><span class="line"><span class="comment">// 模拟执行栈</span></span><br><span class="line"><span class="title class_">ECStack</span>.<span class="title function_">push</span>(&lt;checkscope&gt; functionContext);</span><br><span class="line"><span class="title class_">ECStack</span>.<span class="title function_">pop</span>();</span><br><span class="line"><span class="title class_">ECStack</span>.<span class="title function_">push</span>(&lt;f&gt; functionContext);</span><br><span class="line"><span class="title class_">ECStack</span>.<span class="title function_">pop</span>();</span><br></pre></td></tr></table></figure>
<h3 id="从执行上下文分析闭包"><a href="#从执行上下文分析闭包" class="headerlink" title="从执行上下文分析闭包"></a>从执行上下文分析闭包</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createCounter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> counter = <span class="number">0</span></span><br><span class="line">  <span class="keyword">const</span> myFunction = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    counter = counter + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> counter</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> myFunction</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> increment = <span class="title function_">createCounter</span>()</span><br><span class="line"><span class="keyword">const</span> c1 = <span class="title function_">increment</span>()</span><br><span class="line"><span class="keyword">const</span> c2 = <span class="title function_">increment</span>()</span><br><span class="line"><span class="keyword">const</span> c3 = <span class="title function_">increment</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;example increment&#x27;</span>, c1, c2, c3) <span class="comment">// 1,2,3</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">sleep</span> = (<span class="params">time</span>) =&gt; <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, time)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// IIFE （申明即执行的函数）</span></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">await</span> sleep (<span class="number">1000</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(), i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>批量更新减少渲染次数</title>
    <url>/posts/40025/</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>React 18 增加了一个新的优化特性，在代码中无需手动处理，就可以支持更多场景下的批量更新 (batching)。本文将说明什么是批量更新，在 React 18 版本以前它是如何工作的，以及它在 React 18 版本发生了怎样的变化。</p>
<h3 id="什么是批量更新？"><a href="#什么是批量更新？" class="headerlink" title="什么是批量更新？"></a>什么是批量更新？</h3><p>批量更新是指 React 将多次 state 更新进行合并处理，最终只进行一次渲染，以获得更好的性能。</p>
<p>例如，如果在同一个点击事件中有两个状态更新，React 总是会把它们批量处理成一个重新渲染。如果运行以下代码，我们会看到每次点击时，虽然设置了两次状态，React 也只执行一次渲染：</p>
<span id="more"></span>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">	<span class="keyword">const</span> [flag, setFlag] = <span class="title function_">useState</span>(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="title function_">setCount</span>(<span class="function">(<span class="params">c</span>) =&gt;</span> c + <span class="number">1</span>) <span class="comment">// Does not re-render yet</span></span><br><span class="line">		<span class="title function_">setFlag</span>(<span class="function">(<span class="params">f</span>) =&gt;</span> !f) <span class="comment">// Does not re-render yet</span></span><br><span class="line">		<span class="comment">// React will only re-render once at the end (that&#x27;s batching!)</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">		<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>Next<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> <span class="attr">flag</span> ? &#x27;<span class="attr">blue</span>&#x27; <span class="attr">:</span> &#x27;<span class="attr">black</span>&#x27; &#125;&#125;&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">	)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>编写简洁的react代码</title>
    <url>/posts/39576/</url>
    <content><![CDATA[<h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="comment">// 两个条件的条件渲染</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">ConditionalRenderingWhenTrueBad</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">	<span class="keyword">const</span> [showConditionalText, setShowConditionalText] = <span class="title function_">useState</span>(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params"></span>) =&gt; <span class="title function_">setShowConditionalText</span>(<span class="function">(<span class="params">showConditionalText</span>) =&gt;</span> !showConditionalText)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">		<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>Toggle the text<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			&#123;showConditionalText ? <span class="tag">&lt;<span class="name">p</span>&gt;</span>The condition must be true!<span class="tag">&lt;/<span class="name">p</span>&gt;</span> : null&#125;</span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">	)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 一个条件的条件渲染</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">ConditionalRenderingWhenTrueGood</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">	<span class="keyword">const</span> [showConditionalText, setShowConditionalText] = <span class="title function_">useState</span>(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params"></span>) =&gt; <span class="title function_">setShowConditionalText</span>(<span class="function">(<span class="params">showConditionalText</span>) =&gt;</span> !showConditionalText)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">		<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>Toggle the text<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			&#123;showConditionalText &amp;&amp; <span class="tag">&lt;<span class="name">p</span>&gt;</span>The condition must be true!<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">	)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>
<h3 id="布尔型-props"><a href="#布尔型-props" class="headerlink" title="布尔型 props"></a>布尔型 props</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当组件的 prop 为 true 时，只需要提供属性名即可，例如：myTruthyProp，myTruthyProp=&#123;true&#125; 这样的写法是没有必要的。</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">HungryMessage</span> = (<span class="params">&#123; isHungry &#125;</span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;isHungry ? &#x27;I am hungry&#x27; : &#x27;I am full&#x27;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">BooleanPropGood</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">	<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">b</span>&gt;</span>This person is hungry: <span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;<span class="name">HungryMessage</span> <span class="attr">isHungry</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">b</span>&gt;</span>This person is full: <span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;<span class="name">HungryMessage</span> <span class="attr">isHungry</span>=<span class="string">&#123;false&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="字符串-props"><a href="#字符串-props" class="headerlink" title="字符串 props"></a>字符串 props</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字符串属性值可以用双引号赋值，不需要使用大括号或反引号</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Greeting</span> = (<span class="params">&#123; personName &#125;</span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hi, &#123;personName&#125;!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">StringPropValuesGood</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">	<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;<span class="name">Greeting</span> <span class="attr">personName</span>=<span class="string">&quot;John&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;<span class="name">Greeting</span> <span class="attr">personName</span>=<span class="string">&quot;Matt&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;<span class="name">Greeting</span> <span class="attr">personName</span>=<span class="string">&quot;Paul&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="事件处理函数"><a href="#事件处理函数" class="headerlink" title="事件处理函数"></a>事件处理函数</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果一个事件处理函数只接受 Event 对象这一个参数，可以像 onChange=&#123;handleChange&#125; 这样直接将该函数作为事件处理对象，而不需要用匿名函数将该函数再包裹一层：onChange=&#123;e =&gt; handleChange(e)&#125;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">UnnecessaryAnonymousFunctionsGood</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">	<span class="keyword">const</span> [inputValue, setInputValue] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> <span class="title function_">handleChange</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">		<span class="title function_">setInputValue</span>(e.<span class="property">target</span>.<span class="property">value</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">		<span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">&quot;name&quot;</span>&gt;</span>Name: <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">				<span class="attr">id</span>=<span class="string">&quot;name&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">				<span class="attr">value</span>=<span class="string">&#123;inputValue&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">				<span class="attr">onChange</span>=<span class="string">&#123;handleChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">			/&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;/&gt;</span></span></span><br><span class="line">	)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="传递组件作为-props"><a href="#传递组件作为-props" class="headerlink" title="传递组件作为 props"></a>传递组件作为 props</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当组件作为 prop 被传递给另一个组件时，被传递的组件如果不需要其他的 props，则无需使用函数再包裹一层。</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">CircleIcon</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">	<span class="language-xml"><span class="tag">&lt;<span class="name">svg</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">		<span class="attr">height</span>=<span class="string">&quot;100&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">		<span class="attr">width</span>=<span class="string">&quot;100&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">	&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;<span class="name">circle</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">			<span class="attr">cx</span>=<span class="string">&quot;50&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">			<span class="attr">cy</span>=<span class="string">&quot;50&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">			<span class="attr">r</span>=<span class="string">&quot;40&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">			<span class="attr">stroke</span>=<span class="string">&quot;black&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">			<span class="attr">stroke-width</span>=<span class="string">&quot;3&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">			<span class="attr">fill</span>=<span class="string">&quot;red&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">		/&gt;</span></span></span><br><span class="line"><span class="language-xml">	<span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ComponentThatAcceptsAnIcon</span> = (<span class="params">&#123; IconComponent &#125;</span>) =&gt; (</span><br><span class="line">	<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>Below is the icon component prop I was given:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;<span class="name">IconComponent</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">UnnecessaryAnonymousFunctionComponentsBad</span> = (<span class="params"></span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">ComponentThatAcceptsAnIcon</span> <span class="attr">IconComponent</span>=<span class="string">&#123;()</span> =&gt;</span> <span class="tag">&lt;<span class="name">CircleIcon</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">UnnecessaryAnonymousFunctionComponentsGood</span> = (<span class="params"></span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">ComponentThatAcceptsAnIcon</span> <span class="attr">IconComponent</span>=<span class="string">&#123;CircleIcon&#125;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="未定义的-props"><a href="#未定义的-props" class="headerlink" title="未定义的 props"></a>未定义的 props</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 未定义的 props 是被自动拦截的，如果未定义的 prop 是允许的话，则不用担心未定义的回调。</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ButtonOne</span> = (<span class="params">&#123; handleClick &#125;</span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick</span> || <span class="attr">undefined</span>&#125;&gt;</span>Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ButtonTwo</span> = (<span class="params">&#123; handleClick &#125;</span>) =&gt; &#123;</span><br><span class="line">	<span class="keyword">const</span> <span class="title function_">noop</span> = (<span class="params"></span>) =&gt; &#123;&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick</span> || <span class="attr">noop</span>&#125;&gt;</span>Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">UndefinedPropsBad</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">	<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;<span class="name">ButtonOne</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;<span class="name">ButtonOne</span> <span class="attr">handleClick</span>=<span class="string">&#123;()</span> =&gt;</span> alert(&#x27;Clicked!&#x27;)&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;<span class="name">ButtonTwo</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;<span class="name">ButtonTwo</span> <span class="attr">handleClick</span>=<span class="string">&#123;()</span> =&gt;</span> alert(&#x27;Clicked!&#x27;)&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">UndefinedPropsGood</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">	<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;<span class="name">ButtonOne</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;<span class="name">ButtonOne</span> <span class="attr">handleClick</span>=<span class="string">&#123;()</span> =&gt;</span> alert(&#x27;Clicked!&#x27;)&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="state-赋值依赖于之前的-state"><a href="#state-赋值依赖于之前的-state" class="headerlink" title="state 赋值依赖于之前的 state"></a>state 赋值依赖于之前的 state</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果新的 state 依赖于之前的 state，则将之前的 state 作为参数，使用函数赋值的方式进行 state 赋值。React 的 state 更新是批量进行的，不这样写的话，更新时可能会导致意想不到的结果。</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">PreviousStateBad</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">	<span class="keyword">const</span> [isDisabled, setIsDisabled] = <span class="title function_">useState</span>(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> <span class="title function_">toggleButton</span> = (<span class="params"></span>) =&gt; <span class="title function_">setIsDisabled</span>(!isDisabled)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> <span class="title function_">toggleButton2Times</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">			<span class="title function_">toggleButton</span>()</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">		<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">disabled</span>=<span class="string">&#123;isDisabled&#125;</span>&gt;</span>I&#x27;m &#123;isDisabled ? &#x27;disabled&#x27; : &#x27;enabled&#x27;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;toggleButton&#125;</span>&gt;</span>Toggle button state<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;toggleButton2Times&#125;</span>&gt;</span>Toggle button state 2 times<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">	)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">PreviousStateGood</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">	<span class="keyword">const</span> [isDisabled, setIsDisabled] = <span class="title function_">useState</span>(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> <span class="title function_">toggleButton</span> = (<span class="params"></span>) =&gt; <span class="title function_">setIsDisabled</span>(<span class="function">(<span class="params">isDisabled</span>) =&gt;</span> !isDisabled)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> <span class="title function_">toggleButton2Times</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">			<span class="title function_">toggleButton</span>()</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">		<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">disabled</span>=<span class="string">&#123;isDisabled&#125;</span>&gt;</span>I&#x27;m &#123;isDisabled ? &#x27;disabled&#x27; : &#x27;enabled&#x27;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;toggleButton&#125;</span>&gt;</span>Toggle button state<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;toggleButton2Times&#125;</span>&gt;</span>Toggle button state 2 times<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">	)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="其他实践"><a href="#其他实践" class="headerlink" title="其他实践"></a>其他实践</h3><ul>
<li>将复杂逻辑提取到具有清晰名称的函数中</li>
<li>将魔法数字提取为常量</li>
<li>使用明确命名的变量</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>排序算法</title>
    <url>/posts/61237/</url>
    <content><![CDATA[<h3 id="深度优先VS广度优先"><a href="#深度优先VS广度优先" class="headerlink" title="深度优先VS广度优先"></a>深度优先VS广度优先</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arrTree = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">label</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">label</span>: <span class="string">&#x27;1-1&#x27;</span>,</span><br><span class="line">                <span class="attr">children</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">label</span>: <span class="string">&#x27;1-1-1&#x27;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">label</span>: <span class="string">&#x27;1-2&#x27;</span>,</span><br><span class="line">                <span class="attr">children</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">label</span>: <span class="string">&#x27;1-2-1&#x27;</span>,</span><br><span class="line">                        <span class="attr">children</span>: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="attr">label</span>: <span class="string">&#x27;1-2-1-1&#x27;</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        ]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">label</span>: <span class="string">&#x27;1-2-2&#x27;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 堆栈实现深度优先遍历</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">dfs1</span> = arr =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> newArr = [...arr]</span><br><span class="line">    <span class="keyword">const</span> result = []</span><br><span class="line">    <span class="keyword">while</span> (newArr.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> item = newArr.<span class="title function_">shift</span>()</span><br><span class="line">        result.<span class="title function_">push</span>(item.<span class="property">label</span>)</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> item.<span class="property">children</span> !== <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = item.<span class="property">children</span>.<span class="property">length</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            newArr.<span class="title function_">unshift</span>(item.<span class="property">children</span>[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 递归实现深度优先遍历</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">dfs2</span> = arr =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> newArr = [...arr]</span><br><span class="line">    <span class="keyword">const</span> result = []</span><br><span class="line">    newArr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">map</span> = data =&gt; &#123;</span><br><span class="line">            result.<span class="title function_">push</span>(data.<span class="property">label</span>)</span><br><span class="line">            data.<span class="property">children</span> &amp;&amp; data.<span class="property">children</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="title function_">map</span>(item))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">map</span>(item)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 队列实现广度优先遍历</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">bfs1</span> = arr =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> newArr = [...arr]</span><br><span class="line">    <span class="keyword">const</span> result = []</span><br><span class="line">    <span class="keyword">while</span> (newArr.<span class="property">length</span>) &#123;</span><br><span class="line">        [...newArr].<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            newArr.<span class="title function_">shift</span>()</span><br><span class="line">            result.<span class="title function_">push</span>(item.<span class="property">label</span>)</span><br><span class="line">            item.<span class="property">children</span> &amp;&amp; (newArr.<span class="title function_">push</span>(...item.<span class="property">children</span>))</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;深度优先遍历1&#x27;</span>, <span class="title function_">dfs1</span>(arrTree))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;深度优先遍历2&#x27;</span>, <span class="title function_">dfs2</span>(arrTree))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;广度优先遍历1&#x27;</span>, <span class="title function_">bfs1</span>(arrTree))</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// T(n) = O(n^2) S(n) = O(n)  稳定</span></span><br><span class="line"><span class="comment">// 优化：记录数组经过一次排序之后位置是否发生变化，不变则认为有序的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">bubbleSort</span> = (<span class="params">arr</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span> - <span class="number">1</span>; i++) &#123; <span class="comment">// 两两比较，所以需要n-1此排序，外层循环用来控制排序趟数</span></span><br><span class="line">        <span class="keyword">let</span> isChange = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; arr.<span class="property">length</span> - i - <span class="number">1</span>; j++) &#123; <span class="comment">// 进过第一次排序数组末尾的元素已经是最大值</span></span><br><span class="line">            <span class="keyword">if</span> (arr[j + <span class="number">1</span>] &lt; arr[j]) &#123;</span><br><span class="line">                [arr[j + <span class="number">1</span>], arr[j]] = [arr[j], arr[j + <span class="number">1</span>]]</span><br><span class="line">                isChange = <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 优化，有序的不再进行排序</span></span><br><span class="line">        <span class="keyword">if</span> (isChange === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;冒泡排序&#x27;</span>, <span class="title function_">bubbleSort</span>(arr1))</span><br></pre></td></tr></table></figure>

<h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// T(n) = O(n^2) S(n) = O(1)  不稳定</span></span><br><span class="line"><span class="comment">// 首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。重复执行</span></span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">selectionSort</span> = arr =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> minIndex;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        minIndex = i</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; arr.<span class="property">length</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; arr[minIndex]) &#123;</span><br><span class="line">                minIndex = j</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        [arr[i], arr[minIndex]] = [arr[minIndex], arr[i]]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;选择排序&#x27;</span>, <span class="title function_">selectionSort</span>(arr2))</span><br></pre></td></tr></table></figure>

<h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// T(n) = O(n^2) S(n) = O(1)  稳定</span></span><br><span class="line"><span class="comment">// 将待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。</span></span><br><span class="line"><span class="keyword">const</span> arr3 = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">insetSort</span> = arr =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> preIndex, current;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        preIndex = i - <span class="number">1</span></span><br><span class="line">        current = arr[i]</span><br><span class="line">        <span class="comment">// 实现有序插入</span></span><br><span class="line">        <span class="keyword">while</span> (preIndex &gt;= <span class="number">0</span> &amp;&amp; arr[preIndex] &gt; current) &#123;</span><br><span class="line">            arr[preIndex + <span class="number">1</span>] = arr[preIndex]</span><br><span class="line">            preIndex--</span><br><span class="line">        &#125;</span><br><span class="line">        arr[preIndex + <span class="number">1</span>] = current</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;插入排序&#x27;</span>, <span class="title function_">insetSort</span>(arr3))</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>编写简洁的react组件</title>
    <url>/posts/15145/</url>
    <content><![CDATA[<h3 id="避免使用扩展操作符传递-props"><a href="#避免使用扩展操作符传递-props" class="headerlink" title="避免使用扩展操作符传递 props"></a>避免使用扩展操作符传递 props</h3><p>首先，让我们从一个应该避免的反模式开始。除非有明确的理由这样做，否则应该避免在组件树中使用扩展操作符传递 props，比如：{ …props }。</p>
<p>通过这种方式传递 props 确实可以更快的编写组件。但这也使得我们很难去定位代码中的 bug。会使我们对编写的组件失去信心，会使得我们重构组件变得更加困难，而且可能会导致出现很难排查的 bug。</p>
<h3 id="将函数参数封装成一个对象"><a href="#将函数参数封装成一个对象" class="headerlink" title="将函数参数封装成一个对象"></a>将函数参数封装成一个对象</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">sampleFunction</span> = (<span class="params">&#123; param1, param2, param3 &#125;</span>) =&gt; &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(&#123; param1, param2, param3 &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<p>以这种方式编写函数签名有几个显著的优点：</p>
<p>1、 你不用再担心参数传递的顺序。我曾犯过几次因函数传参顺序问题而产生了 bug 的错误。<br>2、 对于配置了智能提示的编辑器（现在的大多数都有），可以很好地完成函数参数的自动填充。</p>
<h3 id="于事件处理函数，将该处理函数作为函数的返回值"><a href="#于事件处理函数，将该处理函数作为函数的返回值" class="headerlink" title="于事件处理函数，将该处理函数作为函数的返回值"></a>于事件处理函数，将该处理函数作为函数的返回值</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">SampleComponent</span>(<span class="params">&#123; onValueChange &#125;</span>) &#123;</span><br><span class="line">	<span class="keyword">const</span> <span class="title function_">handleChange</span> = (<span class="params">key</span>) =&gt; &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="function">(<span class="params">e</span>) =&gt;</span> <span class="title function_">onValueChange</span>(key, e.<span class="property">target</span>.<span class="property">value</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">		<span class="language-xml"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;handleChange(</span>&#x27;<span class="attr">name</span>&#x27;)&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;handleChange(</span>&#x27;<span class="attr">email</span>&#x27;)&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;handleChange(</span>&#x27;<span class="attr">phone</span>&#x27;)&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">	)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="组件渲染使用-map-而非-if-else"><a href="#组件渲染使用-map-而非-if-else" class="headerlink" title="组件渲染使用 map 而非 if&#x2F;else"></a>组件渲染使用 map 而非 if&#x2F;else</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Student</span> = (<span class="params">&#123; name &#125;</span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Student name: &#123;name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Teacher</span> = (<span class="params">&#123; name &#125;</span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Teacher name: &#123;name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Guardian</span> = (<span class="params">&#123; name &#125;</span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Guardian name: &#123;name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">SampleComponent</span>(<span class="params">&#123; user &#125;</span>) &#123;</span><br><span class="line">	<span class="keyword">let</span> <span class="title class_">Component</span> = <span class="title class_">Student</span></span><br><span class="line">	<span class="keyword">if</span> (user.<span class="property">type</span> === <span class="string">&#x27;teacher&#x27;</span>) &#123;</span><br><span class="line">		<span class="title class_">Component</span> = <span class="title class_">Teacher</span></span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (user.<span class="property">type</span> === <span class="string">&#x27;guardian&#x27;</span>) &#123;</span><br><span class="line">		<span class="title class_">Component</span> = <span class="title class_">Guardian</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">		<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">Component</span> <span class="attr">name</span>=<span class="string">&#123;user.name&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">	)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">COMPONENT_MAP</span> = &#123;</span><br><span class="line">  <span class="attr">student</span>: <span class="title class_">Student</span>,</span><br><span class="line">  <span class="attr">teacher</span>: <span class="title class_">Teacher</span>,</span><br><span class="line">  <span class="attr">guardian</span>: <span class="title class_">Guardian</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">SampleComponent</span>(<span class="params">&#123; user &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">Component</span> = <span class="variable constant_">COMPONENT_MAP</span>[user.<span class="property">type</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Component</span> <span class="attr">name</span>=<span class="string">&#123;user.name&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Hook组件"><a href="#Hook组件" class="headerlink" title="Hook组件"></a>Hook组件</h3>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式</title>
    <url>/posts/41682/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 职责链模式</span></span><br><span class="line"><span class="comment">// 单例模式 增加标记</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">classList</span>(<span class="params">argument</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (classList.<span class="property">instance</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> classList.<span class="property">instance</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        classList.<span class="property">instance</span> = <span class="variable language_">this</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">classList.<span class="property">instance</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">install</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (install.<span class="property">installed</span> &amp;&amp; _vue === vue) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 註冊</span></span><br><span class="line">    install.<span class="property">installed</span> = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  装饰者模式</span></span><br><span class="line"><span class="keyword">let</span> arrayProto = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line"><span class="keyword">let</span> arrayMethonds = <span class="title class_">Object</span>.<span class="title function_">create</span>(arrayProto)</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;push&#x27;</span>, <span class="string">&#x27;pop&#x27;</span>]</span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">methond</span>) =&gt;</span> &#123;</span><br><span class="line">    arrayMethonds[methond] = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> original = arrayProto[methond];</span><br><span class="line">        <span class="keyword">let</span> result = original.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">        dep.<span class="title function_">notify</span>();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 策略模式 策略对象key-value的形式</span></span><br><span class="line"><span class="comment">// 状态模式 复合判断 带状态管理的策略模式</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>
<h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 观察者模式</span></span><br><span class="line"><span class="comment"> * 主要角色有观察者（Observer）和被观察者（Subject）</span></span><br><span class="line"><span class="comment"> * 首先我们要有一个被观察的对象（重点），多个观察者可以去观察这个对象，二者的关系是通过被观察者建立的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个被观察者</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">observerList</span> = []</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">addObserver</span>(<span class="params">observer</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">observerList</span>.<span class="title function_">push</span>(observer)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">removeObserver</span>(<span class="params">observer</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> index = <span class="variable language_">this</span>.<span class="property">observerList</span>.<span class="title function_">findIndex</span>(<span class="function"><span class="params">o</span> =&gt;</span> o.<span class="property">name</span> === observer.<span class="property">name</span>)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">observerList</span>.<span class="title function_">splice</span>(index, <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">notifyObservers</span>(<span class="params">message</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> observers = <span class="variable language_">this</span>.<span class="property">observerList</span></span><br><span class="line">        observers.<span class="title function_">forEach</span>(<span class="function"><span class="params">observer</span> =&gt;</span> observer.<span class="title function_">notified</span>(message))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, subject</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">        <span class="keyword">if</span> (subject) &#123;</span><br><span class="line">            subject.<span class="title function_">addObserver</span>(<span class="variable language_">this</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">notified</span>(<span class="params">message</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(message + <span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> subject = <span class="keyword">new</span> <span class="title class_">Subject</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> observerA = <span class="keyword">new</span> <span class="title class_">Observer</span>(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> observerB = <span class="keyword">new</span> <span class="title class_">Observer</span>(<span class="string">&#x27;B&#x27;</span>, subject)</span><br><span class="line"></span><br><span class="line">subject.<span class="title function_">addObserver</span>(observerA)</span><br><span class="line"></span><br><span class="line">subject.<span class="title function_">notifyObservers</span>(<span class="string">&#x27;hello,&#x27;</span>)</span><br><span class="line"></span><br><span class="line">subject.<span class="title function_">removeObserver</span>(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"></span><br><span class="line">subject.<span class="title function_">notifyObservers</span>(<span class="string">&#x27;see you again!&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 发布订阅模式</span></span><br><span class="line"><span class="comment"> * 主要角色有发布者（Publisher）订阅者（Subscriber） 和 发布订阅中心（PubSub）</span></span><br><span class="line"><span class="comment"> * 首先我们要有一个发布订阅中心（重点），发布者和订阅者不直接进行通信；而是发布者将要发布的消息交由发布中心处理订阅者也是根据自己的情况按需订阅中心的消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PubSub</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">messages</span> = &#123;&#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">listeners</span> = &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">publish</span>(<span class="params">type, content</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> existContent = <span class="variable language_">this</span>.<span class="property">messages</span>[type]</span><br><span class="line">        <span class="keyword">if</span> (!existContent) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">messages</span>[type] = []</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">messages</span>[type].<span class="title function_">push</span>(content)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">subscribe</span>(<span class="params">type, cb</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> existListener = <span class="variable language_">this</span>.<span class="property">listeners</span>[type]</span><br><span class="line">        <span class="keyword">if</span> (!existListener) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">listeners</span>[type] = []</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">listeners</span>[type].<span class="title function_">push</span>(cb)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">notify</span>(<span class="params">type</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> message = <span class="variable language_">this</span>.<span class="property">messages</span>[type];</span><br><span class="line">        <span class="keyword">const</span> subscribes = <span class="variable language_">this</span>.<span class="property">listeners</span>[type] || []</span><br><span class="line">        subscribes.<span class="title function_">forEach</span>(<span class="function">(<span class="params">cb, index</span>) =&gt;</span> <span class="title function_">cb</span>(message[index]))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Publisher</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, context</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">context</span> = context</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">publish</span>(<span class="params">type, content</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">context</span>.<span class="title function_">publish</span>(type, content)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Subscriber</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, context</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">context</span> = context</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">subscribe</span>(<span class="params">type, cb</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">context</span>.<span class="title function_">subscribe</span>(type, cb)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">TYPE_A</span> = <span class="string">&#x27;music&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">TYPE_B</span> = <span class="string">&#x27;movie&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">TYPE_C</span> = <span class="string">&#x27;novel&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pubsub = <span class="keyword">new</span> <span class="title class_">PubSub</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> A = <span class="keyword">new</span> <span class="title class_">Publisher</span>(<span class="string">&#x27;A发布者&#x27;</span>, pubsub)</span><br><span class="line">A.<span class="title function_">publish</span>(<span class="variable constant_">TYPE_A</span>, <span class="string">&#x27;东方红&#x27;</span>)</span><br><span class="line">A.<span class="title function_">publish</span>(<span class="variable constant_">TYPE_B</span>, <span class="string">&#x27;西游记&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> B = <span class="keyword">new</span> <span class="title class_">Publisher</span>(<span class="string">&#x27;B发布者&#x27;</span>, pubsub)</span><br><span class="line">B.<span class="title function_">publish</span>(<span class="variable constant_">TYPE_A</span>, <span class="string">&#x27;新中国&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> C = <span class="keyword">new</span> <span class="title class_">Publisher</span>(<span class="string">&#x27;C发布者&#x27;</span>, pubsub)</span><br><span class="line">C.<span class="title function_">publish</span>(<span class="variable constant_">TYPE_C</span>, <span class="string">&#x27;水浒传&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">SA</span> = <span class="keyword">new</span> <span class="title class_">Subscriber</span>(<span class="string">&#x27;A订阅者&#x27;</span>, pubsub)</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">SB</span> = <span class="keyword">new</span> <span class="title class_">Subscriber</span>(<span class="string">&#x27;B订阅者&#x27;</span>, pubsub)</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">SC</span> = <span class="keyword">new</span> <span class="title class_">Subscriber</span>(<span class="string">&#x27;C订阅者&#x27;</span>, pubsub)</span><br><span class="line"></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"></span><br><span class="line"><span class="variable constant_">SB</span>.<span class="title function_">subscribe</span>(<span class="variable constant_">TYPE_A</span>, <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;B订阅了&#x27;</span> + res)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pubsub.<span class="title function_">notify</span>(<span class="variable constant_">TYPE_A</span>)</span><br><span class="line">pubsub.<span class="title function_">notify</span>(<span class="variable constant_">TYPE_B</span>)</span><br><span class="line">pubsub.<span class="title function_">notify</span>(<span class="variable constant_">TYPE_C</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
</search>
